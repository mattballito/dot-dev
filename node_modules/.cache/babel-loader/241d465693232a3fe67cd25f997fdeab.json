{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/matth/Desktop/dotDev/Portfolio/React Portfolio Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _createForOfIteratorHelper = require(\"C:/Users/matth/Desktop/dotDev/Portfolio/React Portfolio Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\nvar _classCallCheck = require(\"C:/Users/matth/Desktop/dotDev/Portfolio/React Portfolio Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:/Users/matth/Desktop/dotDev/Portfolio/React Portfolio Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\nvar Updater_1 = require(\"./Particle/Updater\");\nvar ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nvar Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nvar Enums_1 = require(\"../Enums\");\nvar Utils_1 = require(\"../Utils\");\nvar Infecter_1 = require(\"./Particle/Infecter\");\nvar Mover_1 = require(\"./Particle/Mover\");\nvar Vector_1 = require(\"./Particle/Vector\");\nvar Particle = /*#__PURE__*/function () {\n  function Particle(id, container, position, overrideOptions) {\n    _classCallCheck(this, Particle);\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    this.id = id;\n    this.container = container;\n    this.links = [];\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.loops = {\n      opacity: 0,\n      size: 0\n    };\n    var pxRatio = container.retina.pixelRatio;\n    var options = container.actualOptions;\n    var particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n    particlesOptions.load(options.particles);\n    var shapeType = particlesOptions.shape.type;\n    var reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        var overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n      var shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n      if (this.shape) {\n        var shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n          this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n      }\n    } else {\n      var _shapeData = particlesOptions.shape.options[this.shape];\n      if (_shapeData) {\n        this.shapeData = Utils_1.Utils.deepExtend({}, _shapeData instanceof Array ? Utils_1.Utils.itemFromArray(_shapeData, this.id, reduceDuplicates) : _shapeData);\n      }\n    }\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    this.pathDelay = Utils_1.NumberUtils.getValue(this.options.move.path.delay) * 1000;\n    this.wobbleDistance = 0;\n    container.retina.initParticle(this);\n    var color = this.options.color;\n    var sizeOptions = this.options.size;\n    var sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;\n    this.size = {\n      value: sizeValue,\n      max: Utils_1.NumberUtils.getRangeMax(sizeOptions.value) * pxRatio,\n      min: Utils_1.NumberUtils.getRangeMin(sizeOptions.value) * pxRatio\n    };\n    var sizeAnimation = sizeOptions.animation;\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n      var sizeRange = Utils_1.NumberUtils.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\n      this.size.min = Utils_1.NumberUtils.getRangeMin(sizeRange);\n      this.size.max = Utils_1.NumberUtils.getRangeMax(sizeRange);\n      switch (sizeAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.size.value = this.size.min;\n          this.size.status = Enums_1.AnimationStatus.increasing;\n          break;\n        case Enums_1.StartValueType.random:\n          this.size.value = Utils_1.NumberUtils.randomInRange(this.size);\n          this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n        case Enums_1.StartValueType.max:\n        default:\n          this.size.value = this.size.max;\n          this.size.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n      this.size.velocity = ((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n    this.direction = Utils_1.NumberUtils.getParticleDirectionAngle(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    var rotateOptions = this.options.rotate;\n    this.rotate = {\n      value: Utils_1.NumberUtils.getRangeValue(rotateOptions.value) * Math.PI / 180\n    };\n    var rotateDirection = rotateOptions.direction;\n    if (rotateDirection === Enums_1.RotateDirection.random) {\n      var index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n    switch (rotateDirection) {\n      case Enums_1.RotateDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.rotate.status = Enums_1.AnimationStatus.decreasing;\n        break;\n      case Enums_1.RotateDirection.clockwise:\n        this.rotate.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n    var rotateAnimation = this.options.rotate.animation;\n    if (rotateAnimation.enable) {\n      this.rotate.velocity = rotateAnimation.speed / 360 * container.retina.reduceFactor;\n      if (!rotateAnimation.sync) {\n        this.rotate.velocity *= Math.random();\n      }\n    }\n    var tiltOptions = this.options.tilt;\n    this.tilt = {\n      value: Utils_1.NumberUtils.getRangeValue(tiltOptions.value) * Math.PI / 180,\n      sinDirection: Math.random() >= 0.5 ? 1 : -1,\n      cosDirection: Math.random() >= 0.5 ? 1 : -1\n    };\n    var tiltDirection = tiltOptions.direction;\n    if (tiltDirection === Enums_1.TiltDirection.random) {\n      var _index = Math.floor(Math.random() * 2);\n      tiltDirection = _index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n    }\n    switch (tiltDirection) {\n      case Enums_1.TiltDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.tilt.status = Enums_1.AnimationStatus.decreasing;\n        break;\n      case Enums_1.TiltDirection.clockwise:\n        this.tilt.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n    var tiltAnimation = this.options.tilt.animation;\n    if (tiltAnimation.enable) {\n      this.tilt.velocity = tiltAnimation.speed / 360 * container.retina.reduceFactor;\n      if (!tiltAnimation.sync) {\n        this.tilt.velocity *= Math.random();\n      }\n    }\n    var hslColor = Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates);\n    if (hslColor) {\n      this.color = {\n        h: {\n          value: hslColor.h\n        },\n        s: {\n          value: hslColor.s\n        },\n        l: {\n          value: hslColor.l\n        }\n      };\n      var colorAnimation = this.options.color.animation;\n      this.setColorAnimation(colorAnimation.h, this.color.h);\n      this.setColorAnimation(colorAnimation.s, this.color.s);\n      this.setColorAnimation(colorAnimation.l, this.color.l);\n    }\n    var rollOpt = this.options.roll;\n    if (rollOpt.enable) {\n      if (this.color) {\n        if (rollOpt.backColor) {\n          this.backColor = Utils_1.ColorUtils.colorToHsl(rollOpt.backColor);\n        } else if (rollOpt.darken.enable) {\n          this.backColor = {\n            h: this.color.h.value,\n            s: this.color.s.value,\n            l: this.color.l.value - rollOpt.darken.value\n          };\n        } else if (rollOpt.enlighten.enable) {\n          this.backColor = {\n            h: this.color.h.value,\n            s: this.color.s.value,\n            l: this.color.l.value + rollOpt.darken.value\n          };\n        }\n      }\n      this.rollAngle = Math.random() * Math.PI * 2;\n      this.rollSpeed = Utils_1.NumberUtils.getRangeValue(rollOpt.speed) / 360;\n    } else {\n      this.rollAngle = 0;\n      this.rollSpeed = 0;\n    }\n    var wobbleOpt = this.options.wobble;\n    if (wobbleOpt.enable) {\n      this.wobbleAngle = Math.random() * Math.PI * 2;\n      this.wobbleSpeed = Utils_1.NumberUtils.getRangeValue(wobbleOpt.speed) / 360;\n    } else {\n      this.wobbleAngle = 0;\n      this.wobbleSpeed = 0;\n    }\n    this.position = this.calcPosition(this.container, position);\n    this.initialPosition = this.position.copy();\n    this.offset = Vector_1.Vector.create(0, 0);\n    var opacityOptions = this.options.opacity;\n    this.opacity = {\n      max: Utils_1.NumberUtils.getRangeMax(opacityOptions.value),\n      min: Utils_1.NumberUtils.getRangeMin(opacityOptions.value),\n      value: Utils_1.NumberUtils.getValue(opacityOptions)\n    };\n    var opacityAnimation = opacityOptions.animation;\n    if (opacityAnimation.enable) {\n      this.opacity.status = Enums_1.AnimationStatus.increasing;\n      var opacityRange = Utils_1.NumberUtils.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\n      this.opacity.min = Utils_1.NumberUtils.getRangeMin(opacityRange);\n      this.opacity.max = Utils_1.NumberUtils.getRangeMax(opacityRange);\n      switch (opacityAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.opacity.value = this.opacity.min;\n          this.opacity.status = Enums_1.AnimationStatus.increasing;\n          break;\n        case Enums_1.StartValueType.random:\n          this.opacity.value = Utils_1.NumberUtils.randomInRange(this.opacity);\n          this.opacity.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n        case Enums_1.StartValueType.max:\n        default:\n          this.opacity.value = this.opacity.max;\n          this.opacity.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n      this.opacity.velocity = opacityAnimation.speed / 100 * container.retina.reduceFactor;\n      if (!opacityAnimation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n    this.sides = 24;\n    var drawer = container.drawers.get(this.shape);\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n    var sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n    var imageShape = this.loadImageShape(container, drawer);\n    if (imageShape) {\n      this.image = imageShape.image;\n      this.fill = imageShape.fill;\n      this.close = imageShape.close;\n    }\n    this.stroke = this.options.stroke instanceof Array ? Utils_1.Utils.itemFromArray(this.options.stroke, this.id, reduceDuplicates) : this.options.stroke;\n    this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n    var strokeHslColor = (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n    if (strokeHslColor) {\n      this.strokeColor = {\n        h: {\n          value: strokeHslColor.h\n        },\n        s: {\n          value: strokeHslColor.s\n        },\n        l: {\n          value: strokeHslColor.l\n        }\n      };\n      var strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n      if (strokeColorAnimation && this.strokeColor) {\n        this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n        this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n        this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n      }\n    }\n    var lifeOptions = particlesOptions.life;\n    this.lifeDelay = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;\n    this.lifeDelayTime = 0;\n    this.lifeDuration = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;\n    this.lifeTime = 0;\n    this.livesRemaining = particlesOptions.life.count;\n    this.spawning = this.lifeDelay > 0;\n    if (this.lifeDuration <= 0) {\n      this.lifeDuration = -1;\n    }\n    if (this.livesRemaining <= 0) {\n      this.livesRemaining = -1;\n    }\n    this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.options.shadow.color);\n    this.updater = new Updater_1.Updater(container, this);\n    this.infecter = new Infecter_1.Infecter(container);\n    this.mover = new Mover_1.Mover(container, this);\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n  }\n  _createClass(Particle, [{\n    key: \"move\",\n    value: function move(delta) {\n      this.mover.move(delta);\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      this.updater.update(delta);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      this.container.canvas.drawParticle(this, delta);\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return this.position.add(this.offset);\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius() {\n      return this.bubble.radius || this.size.value;\n    }\n  }, {\n    key: \"getMass\",\n    value: function getMass() {\n      var radius = this.getRadius();\n      return Math.pow(radius, 2) * Math.PI / 2;\n    }\n  }, {\n    key: \"getFillColor\",\n    value: function getFillColor() {\n      if (this.bubble.color) {\n        return this.bubble.color;\n      }\n      if (this.backColor && Math.floor(this.rollAngle / (Math.PI / 2)) % 2) {\n        return this.backColor;\n      }\n      return Utils_1.ColorUtils.getHslFromAnimation(this.color);\n    }\n  }, {\n    key: \"getStrokeColor\",\n    value: function getStrokeColor() {\n      var _a, _b;\n      return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.ColorUtils.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(override) {\n      this.destroyed = true;\n      this.bubble.inRange = false;\n      this.links = [];\n      if (this.unbreakable) {\n        return;\n      }\n      this.destroyed = true;\n      this.bubble.inRange = false;\n      var _iterator = _createForOfIteratorHelper(this.container.plugins),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            plugin = _step$value[1];\n          if (plugin.particleDestroyed) {\n            plugin.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (override) {\n        return;\n      }\n      var destroyOptions = this.options.destroy;\n      if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n        this.split();\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.loops.opacity = 0;\n      this.loops.size = 0;\n    }\n  }, {\n    key: \"split\",\n    value: function split() {\n      var splitOptions = this.options.destroy.split;\n      if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n        return;\n      }\n      var rate = Utils_1.NumberUtils.getRangeValue(splitOptions.rate.value);\n      for (var i = 0; i < rate; i++) {\n        this.container.particles.addSplitParticle(this);\n      }\n    }\n  }, {\n    key: \"setColorAnimation\",\n    value: function setColorAnimation(colorAnimation, colorValue) {\n      if (colorAnimation.enable) {\n        colorValue.velocity = colorAnimation.speed / 100 * this.container.retina.reduceFactor;\n        if (colorAnimation.sync) {\n          return;\n        }\n        colorValue.status = Enums_1.AnimationStatus.increasing;\n        colorValue.velocity *= Math.random();\n        if (colorValue.value) {\n          colorValue.value *= Math.random();\n        }\n      } else {\n        colorValue.velocity = 0;\n      }\n    }\n  }, {\n    key: \"calcPosition\",\n    value: function calcPosition(container, position) {\n      var tryCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var _a, _b;\n      var _iterator2 = _createForOfIteratorHelper(container.plugins),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n            plugin = _step2$value[1];\n          var pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n          if (pluginPos !== undefined) {\n            return Vector_1.Vector.create(pluginPos.x, pluginPos.y);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var canvasSize = container.canvas.size;\n      var pos = Vector_1.Vector.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height);\n      var outMode = this.options.move.outMode;\n      if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n        if (pos.x > container.canvas.size.width - this.size.value * 2) {\n          pos.x -= this.size.value;\n        } else if (pos.x < this.size.value * 2) {\n          pos.x += this.size.value;\n        }\n      }\n      if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n        if (pos.y > container.canvas.size.height - this.size.value * 2) {\n          pos.y -= this.size.value;\n        } else if (pos.y < this.size.value * 2) {\n          pos.y += this.size.value;\n        }\n      }\n      if (this.checkOverlap(pos, tryCount)) {\n        return this.calcPosition(container, undefined, tryCount + 1);\n      }\n      return pos;\n    }\n  }, {\n    key: \"checkOverlap\",\n    value: function checkOverlap(pos) {\n      var tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var overlapOptions = this.options.collisions.overlap;\n      if (!overlapOptions.enable) {\n        var retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n          throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        var overlaps = false;\n        var _iterator3 = _createForOfIteratorHelper(this.container.particles.array),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var particle = _step3.value;\n            if (Utils_1.NumberUtils.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n              overlaps = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        return overlaps;\n      }\n      return false;\n    }\n  }, {\n    key: \"calculateVelocity\",\n    value: function calculateVelocity() {\n      var baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this.direction);\n      var res = baseVelocity.copy();\n      var moveOptions = this.options.move;\n      var rad = Math.PI / 180 * moveOptions.angle.value;\n      var radOffset = Math.PI / 180 * moveOptions.angle.offset;\n      var range = {\n        left: radOffset - rad / 2,\n        right: radOffset + rad / 2\n      };\n      if (!moveOptions.straight) {\n        res.angle += Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(range.left, range.right));\n      }\n      if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n        res.length *= Math.random();\n      }\n      return res;\n    }\n  }, {\n    key: \"loadImageShape\",\n    value: function loadImageShape(container, drawer) {\n      var _this = this;\n      var _a, _b, _c, _d, _e;\n      if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n        return;\n      }\n      var imageDrawer = drawer;\n      var images = imageDrawer.getImages(container).images;\n      var imageData = this.shapeData;\n      var image = (_a = images.find(function (t) {\n        return t.source === imageData.src;\n      })) !== null && _a !== void 0 ? _a : images[0];\n      var color = this.getFillColor();\n      var imageRes;\n      if (!image) {\n        return;\n      }\n      if (image.svgData !== undefined && imageData.replaceColor && color) {\n        var svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\n        var svg = new Blob([svgColoredData], {\n          type: \"image/svg+xml\"\n        });\n        var domUrl = URL || window.URL || window.webkitURL || window;\n        var url = domUrl.createObjectURL(svg);\n        var img = new Image();\n        imageRes = {\n          data: Object.assign(Object.assign({}, image), {\n            svgData: svgColoredData\n          }),\n          loaded: false,\n          ratio: imageData.width / imageData.height,\n          replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n          source: imageData.src\n        };\n        img.addEventListener(\"load\", function () {\n          if (_this.image) {\n            _this.image.loaded = true;\n            image.element = img;\n          }\n          domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", function () {\n          domUrl.revokeObjectURL(url);\n          Utils_1.Utils.loadImage(imageData.src).then(function (img2) {\n            if (_this.image && img2) {\n              image.element = img2.element;\n              _this.image.loaded = true;\n            }\n          });\n        });\n        img.src = url;\n      } else {\n        imageRes = {\n          data: image,\n          loaded: true,\n          ratio: imageData.width / imageData.height,\n          replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n          source: imageData.src\n        };\n      }\n      if (!imageRes.ratio) {\n        imageRes.ratio = 1;\n      }\n      var fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n      var close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n      return {\n        image: imageRes,\n        fill: fill,\n        close: close\n      };\n    }\n  }]);\n  return Particle;\n}();\nexports.Particle = Particle;","map":{"version":3,"names":["_slicedToArray","require","_createForOfIteratorHelper","_classCallCheck","_createClass","Object","defineProperty","exports","value","Particle","Updater_1","ParticlesOptions_1","Shape_1","Enums_1","Utils_1","Infecter_1","Mover_1","Vector_1","id","container","position","overrideOptions","_a","_b","_c","_d","_e","_f","_g","_h","_j","links","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","loops","opacity","size","pxRatio","retina","pixelRatio","options","actualOptions","particlesOptions","ParticlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","Utils","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","deepExtend","undefined","pathDelay","NumberUtils","getValue","move","path","delay","wobbleDistance","initParticle","color","sizeOptions","sizeValue","max","getRangeMax","min","getRangeMin","sizeAnimation","animation","enable","status","AnimationStatus","increasing","sizeRange","setRangeValue","minimumValue","startValue","StartValueType","random","randomInRange","Math","decreasing","velocity","sizeAnimationSpeed","reduceFactor","sync","direction","getParticleDirectionAngle","bubble","inRange","initialVelocity","calculateVelocity","copy","rotateOptions","rotate","getRangeValue","PI","rotateDirection","RotateDirection","index","floor","counterClockwise","clockwise","rotateAnimation","speed","tiltOptions","tilt","sinDirection","cosDirection","tiltDirection","TiltDirection","tiltAnimation","hslColor","ColorUtils","colorToHsl","h","s","l","colorAnimation","setColorAnimation","rollOpt","roll","backColor","darken","enlighten","rollAngle","rollSpeed","wobbleOpt","wobble","wobbleAngle","wobbleSpeed","calcPosition","initialPosition","offset","Vector","create","opacityOptions","opacityAnimation","opacityRange","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","sideCountFunc","getSidesCount","imageShape","loadImageShape","image","stroke","strokeWidth","width","strokeHslColor","getFillColor","strokeColor","strokeColorAnimation","lifeOptions","life","lifeDelay","lifeDelayTime","lifeDuration","duration","lifeTime","livesRemaining","count","spawning","shadowColor","colorToRgb","shadow","updater","Updater","infecter","Infecter","mover","Mover","particleInit","key","delta","update","draw","canvas","drawParticle","getPosition","add","getRadius","radius","getMass","pow","getHslFromAnimation","getStrokeColor","destroy","override","_iterator","plugins","_step","n","done","_step$value","plugin","particleDestroyed","err","e","f","destroyOptions","mode","DestroyMode","split","reset","splitOptions","rate","i","addSplitParticle","colorValue","tryCount","arguments","length","_iterator2","_step2","_step2$value","pluginPos","particlePosition","x","y","canvasSize","pos","height","outMode","isInArray","OutMode","bounce","bounceHorizontal","bounceVertical","checkOverlap","overlapOptions","collisions","overlap","retries","Error","overlaps","_iterator3","array","_step3","particle","getDistance","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","angle","radOffset","range","left","right","straight","_this","ShapeType","images","imageDrawer","getImages","imageData","find","t","source","src","imageRes","svgData","replaceColor","svgColoredData","replaceColorSvg","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","img","Image","data","assign","loaded","ratio","replace_color","addEventListener","element","revokeObjectURL","loadImage","then","img2"],"sources":["C:/Users/matth/Desktop/dotDev/Portfolio/React Portfolio Website/node_modules/tsparticles/Core/Particle.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Particle = void 0;\r\nconst Updater_1 = require(\"./Particle/Updater\");\r\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\r\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\r\nconst Enums_1 = require(\"../Enums\");\r\nconst Utils_1 = require(\"../Utils\");\r\nconst Infecter_1 = require(\"./Particle/Infecter\");\r\nconst Mover_1 = require(\"./Particle/Mover\");\r\nconst Vector_1 = require(\"./Particle/Vector\");\r\nclass Particle {\r\n    constructor(id, container, position, overrideOptions) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\r\n        this.id = id;\r\n        this.container = container;\r\n        this.links = [];\r\n        this.fill = true;\r\n        this.close = true;\r\n        this.lastPathTime = 0;\r\n        this.destroyed = false;\r\n        this.unbreakable = false;\r\n        this.splitCount = 0;\r\n        this.misplaced = false;\r\n        this.loops = {\r\n            opacity: 0,\r\n            size: 0,\r\n        };\r\n        const pxRatio = container.retina.pixelRatio;\r\n        const options = container.actualOptions;\r\n        const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\r\n        particlesOptions.load(options.particles);\r\n        const shapeType = particlesOptions.shape.type;\r\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\r\n        this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\r\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\r\n            if (overrideOptions.shape.type) {\r\n                const overrideShapeType = overrideOptions.shape.type;\r\n                this.shape =\r\n                    overrideShapeType instanceof Array\r\n                        ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates)\r\n                        : overrideShapeType;\r\n            }\r\n            const shapeOptions = new Shape_1.Shape();\r\n            shapeOptions.load(overrideOptions.shape);\r\n            if (this.shape) {\r\n                const shapeData = shapeOptions.options[this.shape];\r\n                if (shapeData) {\r\n                    this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array\r\n                        ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates)\r\n                        : shapeData);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const shapeData = particlesOptions.shape.options[this.shape];\r\n            if (shapeData) {\r\n                this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\r\n            }\r\n        }\r\n        if (overrideOptions !== undefined) {\r\n            particlesOptions.load(overrideOptions);\r\n        }\r\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\r\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\r\n        }\r\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\r\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\r\n        this.options = particlesOptions;\r\n        this.pathDelay = Utils_1.NumberUtils.getValue(this.options.move.path.delay) * 1000;\r\n        this.wobbleDistance = 0;\r\n        container.retina.initParticle(this);\r\n        const color = this.options.color;\r\n        const sizeOptions = this.options.size;\r\n        const sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;\r\n        this.size = {\r\n            value: sizeValue,\r\n            max: Utils_1.NumberUtils.getRangeMax(sizeOptions.value) * pxRatio,\r\n            min: Utils_1.NumberUtils.getRangeMin(sizeOptions.value) * pxRatio,\r\n        };\r\n        const sizeAnimation = sizeOptions.animation;\r\n        if (sizeAnimation.enable) {\r\n            this.size.status = Enums_1.AnimationStatus.increasing;\r\n            const sizeRange = Utils_1.NumberUtils.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\r\n            this.size.min = Utils_1.NumberUtils.getRangeMin(sizeRange);\r\n            this.size.max = Utils_1.NumberUtils.getRangeMax(sizeRange);\r\n            switch (sizeAnimation.startValue) {\r\n                case Enums_1.StartValueType.min:\r\n                    this.size.value = this.size.min;\r\n                    this.size.status = Enums_1.AnimationStatus.increasing;\r\n                    break;\r\n                case Enums_1.StartValueType.random:\r\n                    this.size.value = Utils_1.NumberUtils.randomInRange(this.size);\r\n                    this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\r\n                    break;\r\n                case Enums_1.StartValueType.max:\r\n                default:\r\n                    this.size.value = this.size.max;\r\n                    this.size.status = Enums_1.AnimationStatus.decreasing;\r\n                    break;\r\n            }\r\n            this.size.velocity =\r\n                (((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\r\n                    container.retina.reduceFactor;\r\n            if (!sizeAnimation.sync) {\r\n                this.size.velocity *= Math.random();\r\n            }\r\n        }\r\n        this.direction = Utils_1.NumberUtils.getParticleDirectionAngle(this.options.move.direction);\r\n        this.bubble = {\r\n            inRange: false,\r\n        };\r\n        this.initialVelocity = this.calculateVelocity();\r\n        this.velocity = this.initialVelocity.copy();\r\n        const rotateOptions = this.options.rotate;\r\n        this.rotate = {\r\n            value: (Utils_1.NumberUtils.getRangeValue(rotateOptions.value) * Math.PI) / 180,\r\n        };\r\n        let rotateDirection = rotateOptions.direction;\r\n        if (rotateDirection === Enums_1.RotateDirection.random) {\r\n            const index = Math.floor(Math.random() * 2);\r\n            rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\r\n        }\r\n        switch (rotateDirection) {\r\n            case Enums_1.RotateDirection.counterClockwise:\r\n            case \"counterClockwise\":\r\n                this.rotate.status = Enums_1.AnimationStatus.decreasing;\r\n                break;\r\n            case Enums_1.RotateDirection.clockwise:\r\n                this.rotate.status = Enums_1.AnimationStatus.increasing;\r\n                break;\r\n        }\r\n        const rotateAnimation = this.options.rotate.animation;\r\n        if (rotateAnimation.enable) {\r\n            this.rotate.velocity = (rotateAnimation.speed / 360) * container.retina.reduceFactor;\r\n            if (!rotateAnimation.sync) {\r\n                this.rotate.velocity *= Math.random();\r\n            }\r\n        }\r\n        const tiltOptions = this.options.tilt;\r\n        this.tilt = {\r\n            value: (Utils_1.NumberUtils.getRangeValue(tiltOptions.value) * Math.PI) / 180,\r\n            sinDirection: Math.random() >= 0.5 ? 1 : -1,\r\n            cosDirection: Math.random() >= 0.5 ? 1 : -1,\r\n        };\r\n        let tiltDirection = tiltOptions.direction;\r\n        if (tiltDirection === Enums_1.TiltDirection.random) {\r\n            const index = Math.floor(Math.random() * 2);\r\n            tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\r\n        }\r\n        switch (tiltDirection) {\r\n            case Enums_1.TiltDirection.counterClockwise:\r\n            case \"counterClockwise\":\r\n                this.tilt.status = Enums_1.AnimationStatus.decreasing;\r\n                break;\r\n            case Enums_1.TiltDirection.clockwise:\r\n                this.tilt.status = Enums_1.AnimationStatus.increasing;\r\n                break;\r\n        }\r\n        const tiltAnimation = this.options.tilt.animation;\r\n        if (tiltAnimation.enable) {\r\n            this.tilt.velocity = (tiltAnimation.speed / 360) * container.retina.reduceFactor;\r\n            if (!tiltAnimation.sync) {\r\n                this.tilt.velocity *= Math.random();\r\n            }\r\n        }\r\n        const hslColor = Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates);\r\n        if (hslColor) {\r\n            this.color = {\r\n                h: {\r\n                    value: hslColor.h,\r\n                },\r\n                s: {\r\n                    value: hslColor.s,\r\n                },\r\n                l: {\r\n                    value: hslColor.l,\r\n                },\r\n            };\r\n            const colorAnimation = this.options.color.animation;\r\n            this.setColorAnimation(colorAnimation.h, this.color.h);\r\n            this.setColorAnimation(colorAnimation.s, this.color.s);\r\n            this.setColorAnimation(colorAnimation.l, this.color.l);\r\n        }\r\n        const rollOpt = this.options.roll;\r\n        if (rollOpt.enable) {\r\n            if (this.color) {\r\n                if (rollOpt.backColor) {\r\n                    this.backColor = Utils_1.ColorUtils.colorToHsl(rollOpt.backColor);\r\n                }\r\n                else if (rollOpt.darken.enable) {\r\n                    this.backColor = {\r\n                        h: this.color.h.value,\r\n                        s: this.color.s.value,\r\n                        l: this.color.l.value - rollOpt.darken.value,\r\n                    };\r\n                }\r\n                else if (rollOpt.enlighten.enable) {\r\n                    this.backColor = {\r\n                        h: this.color.h.value,\r\n                        s: this.color.s.value,\r\n                        l: this.color.l.value + rollOpt.darken.value,\r\n                    };\r\n                }\r\n            }\r\n            this.rollAngle = Math.random() * Math.PI * 2;\r\n            this.rollSpeed = Utils_1.NumberUtils.getRangeValue(rollOpt.speed) / 360;\r\n        }\r\n        else {\r\n            this.rollAngle = 0;\r\n            this.rollSpeed = 0;\r\n        }\r\n        const wobbleOpt = this.options.wobble;\r\n        if (wobbleOpt.enable) {\r\n            this.wobbleAngle = Math.random() * Math.PI * 2;\r\n            this.wobbleSpeed = Utils_1.NumberUtils.getRangeValue(wobbleOpt.speed) / 360;\r\n        }\r\n        else {\r\n            this.wobbleAngle = 0;\r\n            this.wobbleSpeed = 0;\r\n        }\r\n        this.position = this.calcPosition(this.container, position);\r\n        this.initialPosition = this.position.copy();\r\n        this.offset = Vector_1.Vector.create(0, 0);\r\n        const opacityOptions = this.options.opacity;\r\n        this.opacity = {\r\n            max: Utils_1.NumberUtils.getRangeMax(opacityOptions.value),\r\n            min: Utils_1.NumberUtils.getRangeMin(opacityOptions.value),\r\n            value: Utils_1.NumberUtils.getValue(opacityOptions),\r\n        };\r\n        const opacityAnimation = opacityOptions.animation;\r\n        if (opacityAnimation.enable) {\r\n            this.opacity.status = Enums_1.AnimationStatus.increasing;\r\n            const opacityRange = Utils_1.NumberUtils.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\r\n            this.opacity.min = Utils_1.NumberUtils.getRangeMin(opacityRange);\r\n            this.opacity.max = Utils_1.NumberUtils.getRangeMax(opacityRange);\r\n            switch (opacityAnimation.startValue) {\r\n                case Enums_1.StartValueType.min:\r\n                    this.opacity.value = this.opacity.min;\r\n                    this.opacity.status = Enums_1.AnimationStatus.increasing;\r\n                    break;\r\n                case Enums_1.StartValueType.random:\r\n                    this.opacity.value = Utils_1.NumberUtils.randomInRange(this.opacity);\r\n                    this.opacity.status =\r\n                        Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\r\n                    break;\r\n                case Enums_1.StartValueType.max:\r\n                default:\r\n                    this.opacity.value = this.opacity.max;\r\n                    this.opacity.status = Enums_1.AnimationStatus.decreasing;\r\n                    break;\r\n            }\r\n            this.opacity.velocity = (opacityAnimation.speed / 100) * container.retina.reduceFactor;\r\n            if (!opacityAnimation.sync) {\r\n                this.opacity.velocity *= Math.random();\r\n            }\r\n        }\r\n        this.sides = 24;\r\n        let drawer = container.drawers.get(this.shape);\r\n        if (!drawer) {\r\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\r\n            if (drawer) {\r\n                container.drawers.set(this.shape, drawer);\r\n            }\r\n        }\r\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\r\n        if (sideCountFunc) {\r\n            this.sides = sideCountFunc(this);\r\n        }\r\n        const imageShape = this.loadImageShape(container, drawer);\r\n        if (imageShape) {\r\n            this.image = imageShape.image;\r\n            this.fill = imageShape.fill;\r\n            this.close = imageShape.close;\r\n        }\r\n        this.stroke =\r\n            this.options.stroke instanceof Array\r\n                ? Utils_1.Utils.itemFromArray(this.options.stroke, this.id, reduceDuplicates)\r\n                : this.options.stroke;\r\n        this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\r\n        const strokeHslColor = (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\r\n        if (strokeHslColor) {\r\n            this.strokeColor = {\r\n                h: {\r\n                    value: strokeHslColor.h,\r\n                },\r\n                s: {\r\n                    value: strokeHslColor.s,\r\n                },\r\n                l: {\r\n                    value: strokeHslColor.l,\r\n                },\r\n            };\r\n            const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\r\n            if (strokeColorAnimation && this.strokeColor) {\r\n                this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\r\n                this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\r\n                this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\r\n            }\r\n        }\r\n        const lifeOptions = particlesOptions.life;\r\n        this.lifeDelay = container.retina.reduceFactor\r\n            ? ((Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random())) /\r\n                container.retina.reduceFactor) *\r\n                1000\r\n            : 0;\r\n        this.lifeDelayTime = 0;\r\n        this.lifeDuration = container.retina.reduceFactor\r\n            ? ((Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random())) /\r\n                container.retina.reduceFactor) *\r\n                1000\r\n            : 0;\r\n        this.lifeTime = 0;\r\n        this.livesRemaining = particlesOptions.life.count;\r\n        this.spawning = this.lifeDelay > 0;\r\n        if (this.lifeDuration <= 0) {\r\n            this.lifeDuration = -1;\r\n        }\r\n        if (this.livesRemaining <= 0) {\r\n            this.livesRemaining = -1;\r\n        }\r\n        this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.options.shadow.color);\r\n        this.updater = new Updater_1.Updater(container, this);\r\n        this.infecter = new Infecter_1.Infecter(container);\r\n        this.mover = new Mover_1.Mover(container, this);\r\n        if (drawer && drawer.particleInit) {\r\n            drawer.particleInit(container, this);\r\n        }\r\n    }\r\n    move(delta) {\r\n        this.mover.move(delta);\r\n    }\r\n    update(delta) {\r\n        this.updater.update(delta);\r\n    }\r\n    draw(delta) {\r\n        this.container.canvas.drawParticle(this, delta);\r\n    }\r\n    getPosition() {\r\n        return this.position.add(this.offset);\r\n    }\r\n    getRadius() {\r\n        return this.bubble.radius || this.size.value;\r\n    }\r\n    getMass() {\r\n        const radius = this.getRadius();\r\n        return (Math.pow(radius, 2) * Math.PI) / 2;\r\n    }\r\n    getFillColor() {\r\n        if (this.bubble.color) {\r\n            return this.bubble.color;\r\n        }\r\n        if (this.backColor && Math.floor(this.rollAngle / (Math.PI / 2)) % 2) {\r\n            return this.backColor;\r\n        }\r\n        return Utils_1.ColorUtils.getHslFromAnimation(this.color);\r\n    }\r\n    getStrokeColor() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.ColorUtils.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\r\n    }\r\n    destroy(override) {\r\n        this.destroyed = true;\r\n        this.bubble.inRange = false;\r\n        this.links = [];\r\n        if (this.unbreakable) {\r\n            return;\r\n        }\r\n        this.destroyed = true;\r\n        this.bubble.inRange = false;\r\n        for (const [, plugin] of this.container.plugins) {\r\n            if (plugin.particleDestroyed) {\r\n                plugin.particleDestroyed(this, override);\r\n            }\r\n        }\r\n        if (override) {\r\n            return;\r\n        }\r\n        const destroyOptions = this.options.destroy;\r\n        if (destroyOptions.mode === Enums_1.DestroyMode.split) {\r\n            this.split();\r\n        }\r\n    }\r\n    reset() {\r\n        this.loops.opacity = 0;\r\n        this.loops.size = 0;\r\n    }\r\n    split() {\r\n        const splitOptions = this.options.destroy.split;\r\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\r\n            return;\r\n        }\r\n        const rate = Utils_1.NumberUtils.getRangeValue(splitOptions.rate.value);\r\n        for (let i = 0; i < rate; i++) {\r\n            this.container.particles.addSplitParticle(this);\r\n        }\r\n    }\r\n    setColorAnimation(colorAnimation, colorValue) {\r\n        if (colorAnimation.enable) {\r\n            colorValue.velocity = (colorAnimation.speed / 100) * this.container.retina.reduceFactor;\r\n            if (colorAnimation.sync) {\r\n                return;\r\n            }\r\n            colorValue.status = Enums_1.AnimationStatus.increasing;\r\n            colorValue.velocity *= Math.random();\r\n            if (colorValue.value) {\r\n                colorValue.value *= Math.random();\r\n            }\r\n        }\r\n        else {\r\n            colorValue.velocity = 0;\r\n        }\r\n    }\r\n    calcPosition(container, position, tryCount = 0) {\r\n        var _a, _b;\r\n        for (const [, plugin] of container.plugins) {\r\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\r\n            if (pluginPos !== undefined) {\r\n                return Vector_1.Vector.create(pluginPos.x, pluginPos.y);\r\n            }\r\n        }\r\n        const canvasSize = container.canvas.size;\r\n        const pos = Vector_1.Vector.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height);\r\n        const outMode = this.options.move.outMode;\r\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\r\n            if (pos.x > container.canvas.size.width - this.size.value * 2) {\r\n                pos.x -= this.size.value;\r\n            }\r\n            else if (pos.x < this.size.value * 2) {\r\n                pos.x += this.size.value;\r\n            }\r\n        }\r\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\r\n            if (pos.y > container.canvas.size.height - this.size.value * 2) {\r\n                pos.y -= this.size.value;\r\n            }\r\n            else if (pos.y < this.size.value * 2) {\r\n                pos.y += this.size.value;\r\n            }\r\n        }\r\n        if (this.checkOverlap(pos, tryCount)) {\r\n            return this.calcPosition(container, undefined, tryCount + 1);\r\n        }\r\n        return pos;\r\n    }\r\n    checkOverlap(pos, tryCount = 0) {\r\n        const overlapOptions = this.options.collisions.overlap;\r\n        if (!overlapOptions.enable) {\r\n            const retries = overlapOptions.retries;\r\n            if (retries >= 0 && tryCount > retries) {\r\n                throw new Error(\"Particle is overlapping and can't be placed\");\r\n            }\r\n            let overlaps = false;\r\n            for (const particle of this.container.particles.array) {\r\n                if (Utils_1.NumberUtils.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\r\n                    overlaps = true;\r\n                    break;\r\n                }\r\n            }\r\n            return overlaps;\r\n        }\r\n        return false;\r\n    }\r\n    calculateVelocity() {\r\n        const baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this.direction);\r\n        const res = baseVelocity.copy();\r\n        const moveOptions = this.options.move;\r\n        const rad = (Math.PI / 180) * moveOptions.angle.value;\r\n        const radOffset = (Math.PI / 180) * moveOptions.angle.offset;\r\n        const range = {\r\n            left: radOffset - rad / 2,\r\n            right: radOffset + rad / 2,\r\n        };\r\n        if (!moveOptions.straight) {\r\n            res.angle += Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(range.left, range.right));\r\n        }\r\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\r\n            res.length *= Math.random();\r\n        }\r\n        return res;\r\n    }\r\n    loadImageShape(container, drawer) {\r\n        var _a, _b, _c, _d, _e;\r\n        if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\r\n            return;\r\n        }\r\n        const imageDrawer = drawer;\r\n        const images = imageDrawer.getImages(container).images;\r\n        const imageData = this.shapeData;\r\n        const image = (_a = images.find((t) => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\r\n        const color = this.getFillColor();\r\n        let imageRes;\r\n        if (!image) {\r\n            return;\r\n        }\r\n        if (image.svgData !== undefined && imageData.replaceColor && color) {\r\n            const svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\r\n            const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" });\r\n            const domUrl = URL || window.URL || window.webkitURL || window;\r\n            const url = domUrl.createObjectURL(svg);\r\n            const img = new Image();\r\n            imageRes = {\r\n                data: Object.assign(Object.assign({}, image), { svgData: svgColoredData }),\r\n                loaded: false,\r\n                ratio: imageData.width / imageData.height,\r\n                replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\r\n                source: imageData.src,\r\n            };\r\n            img.addEventListener(\"load\", () => {\r\n                if (this.image) {\r\n                    this.image.loaded = true;\r\n                    image.element = img;\r\n                }\r\n                domUrl.revokeObjectURL(url);\r\n            });\r\n            img.addEventListener(\"error\", () => {\r\n                domUrl.revokeObjectURL(url);\r\n                Utils_1.Utils.loadImage(imageData.src).then((img2) => {\r\n                    if (this.image && img2) {\r\n                        image.element = img2.element;\r\n                        this.image.loaded = true;\r\n                    }\r\n                });\r\n            });\r\n            img.src = url;\r\n        }\r\n        else {\r\n            imageRes = {\r\n                data: image,\r\n                loaded: true,\r\n                ratio: imageData.width / imageData.height,\r\n                replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\r\n                source: imageData.src,\r\n            };\r\n        }\r\n        if (!imageRes.ratio) {\r\n            imageRes.ratio = 1;\r\n        }\r\n        const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\r\n        const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\r\n        return {\r\n            image: imageRes,\r\n            fill,\r\n            close,\r\n        };\r\n    }\r\n}\r\nexports.Particle = Particle;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}