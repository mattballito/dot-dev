{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/matth/Desktop/dotDev/Portfolio/React Portfolio Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _classCallCheck = require(\"C:/Users/matth/Desktop/dotDev/Portfolio/React Portfolio Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:/Users/matth/Desktop/dotDev/Portfolio/React Portfolio Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _createForOfIteratorHelper = require(\"C:/Users/matth/Desktop/dotDev/Portfolio/React Portfolio Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PolygonMaskInstance = void 0;\nvar Enums_1 = require(\"./Enums\");\nvar Utils_1 = require(\"../../Utils\");\nvar PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nvar OutModeDirection_1 = require(\"../../Enums/Directions/OutModeDirection\");\nfunction drawPolygonMask(context, rawData, stroke) {\n  var color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n  if (!color) {\n    return;\n  }\n  context.beginPath();\n  context.moveTo(rawData[0].x, rawData[0].y);\n  var _iterator = _createForOfIteratorHelper(rawData),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      context.lineTo(item.x, item.y);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  context.closePath();\n  context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color);\n  context.lineWidth = stroke.width;\n  context.stroke();\n}\nfunction drawPolygonMaskPath(context, path, stroke, position) {\n  context.translate(position.x, position.y);\n  var color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n  if (!color) {\n    return;\n  }\n  context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color, stroke.opacity);\n  context.lineWidth = stroke.width;\n  context.stroke(path);\n}\nfunction parsePaths(paths, scale, offset) {\n  var res = [];\n  var _iterator2 = _createForOfIteratorHelper(paths),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var path = _step2.value;\n      var segments = path.element.pathSegList;\n      var len = segments.numberOfItems;\n      var p = {\n        x: 0,\n        y: 0\n      };\n      for (var i = 0; i < len; i++) {\n        var segment = segments.getItem(i);\n        var svgPathSeg = window.SVGPathSeg;\n        switch (segment.pathSegType) {\n          case svgPathSeg.PATHSEG_MOVETO_ABS:\n          case svgPathSeg.PATHSEG_LINETO_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n          case svgPathSeg.PATHSEG_ARC_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\n            {\n              var absSeg = segment;\n              p.x = absSeg.x;\n              p.y = absSeg.y;\n              break;\n            }\n          case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n            p.x = segment.x;\n            break;\n          case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n            p.y = segment.y;\n            break;\n          case svgPathSeg.PATHSEG_LINETO_REL:\n          case svgPathSeg.PATHSEG_MOVETO_REL:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n          case svgPathSeg.PATHSEG_ARC_REL:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\n            {\n              var relSeg = segment;\n              p.x += relSeg.x;\n              p.y += relSeg.y;\n              break;\n            }\n          case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n            p.x += segment.x;\n            break;\n          case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n            p.y += segment.y;\n            break;\n          case svgPathSeg.PATHSEG_UNKNOWN:\n          case svgPathSeg.PATHSEG_CLOSEPATH:\n            continue;\n        }\n        res.push({\n          x: p.x * scale + offset.x,\n          y: p.y * scale + offset.y\n        });\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return res;\n}\nfunction calcClosestPtOnSegment(s1, s2, pos) {\n  var _Utils_1$NumberUtils$ = Utils_1.NumberUtils.getDistances(pos, s1),\n    dx = _Utils_1$NumberUtils$.dx,\n    dy = _Utils_1$NumberUtils$.dy;\n  var _Utils_1$NumberUtils$2 = Utils_1.NumberUtils.getDistances(s2, s1),\n    dxx = _Utils_1$NumberUtils$2.dx,\n    dyy = _Utils_1$NumberUtils$2.dy;\n  var t = (dx * dxx + dy * dyy) / (Math.pow(dxx, 2) + Math.pow(dyy, 2));\n  var x = s1.x + dxx * t;\n  var y = s1.y + dyy * t;\n  if (t < 0) {\n    x = s1.x;\n    y = s1.y;\n  } else if (t > 1) {\n    x = s2.x;\n    y = s2.y;\n  }\n  return {\n    x: x,\n    y: y,\n    isOnSegment: t >= 0 && t <= 1\n  };\n}\nfunction segmentBounce(start, stop, velocity) {\n  var _Utils_1$NumberUtils$3 = Utils_1.NumberUtils.getDistances(start, stop),\n    dx = _Utils_1$NumberUtils$3.dx,\n    dy = _Utils_1$NumberUtils$3.dy;\n  var wallAngle = Math.atan2(dy, dx);\n  var wallNormalX = Math.sin(wallAngle);\n  var wallNormalY = -Math.cos(wallAngle);\n  var d = 2 * (velocity.x * wallNormalX + velocity.y * wallNormalY);\n  velocity.x -= d * wallNormalX;\n  velocity.y -= d * wallNormalY;\n}\nvar PolygonMaskInstance = /*#__PURE__*/function () {\n  function PolygonMaskInstance(container) {\n    _classCallCheck(this, PolygonMaskInstance);\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask_1.PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n  _createClass(PolygonMaskInstance, [{\n    key: \"initAsync\",\n    value: function initAsync(options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var polygonMaskOptions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n                polygonMaskOptions = this.options;\n                this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n                if (!polygonMaskOptions.enable) {\n                  _context.next = 6;\n                  break;\n                }\n                _context.next = 6;\n                return this.initRawData();\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _this = this;\n      var container = this.container;\n      var options = this.options;\n      if (!(options.enable && options.type !== Enums_1.Type.none)) {\n        return;\n      }\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n      this.redrawTimeout = window.setTimeout(function () {\n        return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return this.initRawData(true);\n                case 2:\n                  container.particles.redraw();\n                case 3:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n      }, 250);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      delete this.raw;\n      delete this.paths;\n    }\n  }, {\n    key: \"particlesInitialization\",\n    value: function particlesInitialization() {\n      var options = this.options;\n      if (options.enable && options.type === Enums_1.Type.inline && (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint || options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n        this.drawPoints();\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"particlePosition\",\n    value: function particlePosition(position) {\n      var _a, _b;\n      var options = this.options;\n      if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n        return;\n      }\n      return Utils_1.Utils.deepExtend({}, position ? position : this.randomPoint());\n    }\n  }, {\n    key: \"particleBounce\",\n    value: function particleBounce(particle, delta, direction) {\n      return this.polygonBounce(particle, delta, direction);\n    }\n  }, {\n    key: \"clickPositionValid\",\n    value: function clickPositionValid(position) {\n      var options = this.options;\n      return options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline && this.checkInsidePolygon(position);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _a;\n      if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      var options = this.options;\n      var polygonDraw = options.draw;\n      if (!(options.enable && polygonDraw.enable)) {\n        return;\n      }\n      var rawData = this.raw;\n      var _iterator3 = _createForOfIteratorHelper(this.paths),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var path = _step3.value;\n          var path2d = path.path2d;\n          var path2dSupported = this.path2DSupported;\n          if (!context) {\n            continue;\n          }\n          if (path2dSupported && path2d && this.offset) {\n            drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            drawPolygonMask(context, rawData, polygonDraw.stroke);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"polygonBounce\",\n    value: function polygonBounce(particle, delta, direction) {\n      var options = this.options;\n      if (!this.raw || !options.enable || direction !== OutModeDirection_1.OutModeDirection.top) {\n        return false;\n      }\n      if (options.type === Enums_1.Type.inside || options.type === Enums_1.Type.outside) {\n        var closest, dx, dy;\n        var pos = particle.getPosition(),\n          radius = particle.getRadius();\n        for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n          var pi = this.raw[i],\n            pj = this.raw[j];\n          closest = calcClosestPtOnSegment(pi, pj, pos);\n          var dist = Utils_1.NumberUtils.getDistances(pos, closest);\n          var _ref = [dist.dx, dist.dy];\n          dx = _ref[0];\n          dy = _ref[1];\n          if (dist.distance < radius) {\n            segmentBounce(pi, pj, particle.velocity);\n            return true;\n          }\n        }\n        if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n          var factor = {\n            x: 1,\n            y: 1\n          };\n          if (particle.position.x >= closest.x) {\n            factor.x = -1;\n          }\n          if (particle.position.y >= closest.y) {\n            factor.y = -1;\n          }\n          particle.position.x = closest.x + radius * 2 * factor.x;\n          particle.position.y = closest.y + radius * 2 * factor.y;\n          particle.velocity.mult(-1);\n          return true;\n        }\n      } else if (options.type === Enums_1.Type.inline && particle.initialPosition) {\n        var _dist = Utils_1.NumberUtils.getDistance(particle.initialPosition, particle.getPosition());\n        if (_dist > this.polygonMaskMoveRadius) {\n          particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"checkInsidePolygon\",\n    value: function checkInsidePolygon(position) {\n      var _a, _b;\n      var container = this.container;\n      var options = this.options;\n      if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n        return true;\n      }\n      if (!this.raw) {\n        throw new Error(Utils_1.Constants.noPolygonFound);\n      }\n      var canvasSize = container.canvas.size;\n      var x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n      var y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n      var inside = false;\n      for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        var pi = this.raw[i];\n        var pj = this.raw[j];\n        var intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n      return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n    }\n  }, {\n    key: \"parseSvgPath\",\n    value: function parseSvgPath(xml, force) {\n      var _a, _b, _c;\n      var forceDownload = force !== null && force !== void 0 ? force : false;\n      if (this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n      var container = this.container;\n      var options = this.options;\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(xml, \"image/svg+xml\");\n      var svg = doc.getElementsByTagName(\"svg\")[0];\n      var svgPaths = svg.getElementsByTagName(\"path\");\n      if (!svgPaths.length) {\n        svgPaths = doc.getElementsByTagName(\"path\");\n      }\n      this.paths = [];\n      for (var i = 0; i < svgPaths.length; i++) {\n        var path = svgPaths.item(i);\n        if (path) {\n          this.paths.push({\n            element: path,\n            length: path.getTotalLength()\n          });\n        }\n      }\n      var pxRatio = container.retina.pixelRatio;\n      var scale = options.scale / pxRatio;\n      this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n      this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n      var position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n        x: 50,\n        y: 50\n      };\n      this.offset = {\n        x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n        y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n      };\n      return parsePaths(this.paths, scale, this.offset);\n    }\n  }, {\n    key: \"downloadSvgPath\",\n    value: function downloadSvgPath(svgUrl, force) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var options, url, forceDownload, req;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = this.options;\n                url = svgUrl || options.url;\n                forceDownload = force !== null && force !== void 0 ? force : false;\n                if (!(!url || this.paths !== undefined && !forceDownload)) {\n                  _context3.next = 5;\n                  break;\n                }\n                return _context3.abrupt(\"return\", this.raw);\n              case 5:\n                _context3.next = 7;\n                return fetch(url);\n              case 7:\n                req = _context3.sent;\n                if (req.ok) {\n                  _context3.next = 10;\n                  break;\n                }\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n              case 10:\n                _context3.t0 = this;\n                _context3.next = 13;\n                return req.text();\n              case 13:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = force;\n                return _context3.abrupt(\"return\", _context3.t0.parseSvgPath.call(_context3.t0, _context3.t1, _context3.t2));\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"drawPoints\",\n    value: function drawPoints() {\n      if (!this.raw) {\n        return;\n      }\n      var _iterator4 = _createForOfIteratorHelper(this.raw),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var item = _step4.value;\n          this.container.particles.addParticle({\n            x: item.x,\n            y: item.y\n          });\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"randomPoint\",\n    value: function randomPoint() {\n      var container = this.container;\n      var options = this.options;\n      var position;\n      if (options.type === Enums_1.Type.inline) {\n        switch (options.inline.arrangement) {\n          case Enums_1.InlineArrangement.randomPoint:\n            position = this.getRandomPoint();\n            break;\n          case Enums_1.InlineArrangement.randomLength:\n            position = this.getRandomPointByLength();\n            break;\n          case Enums_1.InlineArrangement.equidistant:\n            position = this.getEquidistantPointByIndex(container.particles.count);\n            break;\n          case Enums_1.InlineArrangement.onePerPoint:\n          case Enums_1.InlineArrangement.perPoint:\n          default:\n            position = this.getPointByIndex(container.particles.count);\n        }\n      } else {\n        position = {\n          x: Math.random() * container.canvas.size.width,\n          y: Math.random() * container.canvas.size.height\n        };\n      }\n      if (this.checkInsidePolygon(position)) {\n        return position;\n      } else {\n        return this.randomPoint();\n      }\n    }\n  }, {\n    key: \"getRandomPoint\",\n    value: function getRandomPoint() {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n      var coords = Utils_1.Utils.itemFromArray(this.raw);\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"getRandomPointByLength\",\n    value: function getRandomPointByLength() {\n      var _a, _b, _c;\n      var options = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n      var path = Utils_1.Utils.itemFromArray(this.paths);\n      var distance = Math.floor(Math.random() * path.length) + 1;\n      var point = path.element.getPointAtLength(distance);\n      return {\n        x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n        y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n      };\n    }\n  }, {\n    key: \"getEquidistantPointByIndex\",\n    value: function getEquidistantPointByIndex(index) {\n      var _a, _b, _c, _d, _e, _f, _g;\n      var options = this.container.actualOptions;\n      var polygonMaskOptions = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      var offset = 0;\n      var point;\n      var totalLength = this.paths.reduce(function (tot, path) {\n        return tot + path.length;\n      }, 0);\n      var distance = totalLength / options.particles.number.value;\n      var _iterator5 = _createForOfIteratorHelper(this.paths),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var path = _step5.value;\n          var pathDistance = distance * index - offset;\n          if (pathDistance <= path.length) {\n            point = path.element.getPointAtLength(pathDistance);\n            break;\n          } else {\n            offset += path.length;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return {\n        x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n        y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n      };\n    }\n  }, {\n    key: \"getPointByIndex\",\n    value: function getPointByIndex(index) {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n      var coords = this.raw[index % this.raw.length];\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"createPath2D\",\n    value: function createPath2D() {\n      var _this2 = this;\n      var _a, _b;\n      var options = this.options;\n      if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      var _iterator6 = _createForOfIteratorHelper(this.paths),\n        _step6;\n      try {\n        var _loop = function _loop() {\n          var path = _step6.value;\n          var pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n          if (pathData) {\n            var path2d = new Path2D(pathData);\n            var matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n            var finalPath = new Path2D();\n            var transform = matrix.scale(options.scale);\n            if (finalPath.addPath) {\n              finalPath.addPath(path2d, transform);\n              path.path2d = finalPath;\n            } else {\n              delete path.path2d;\n            }\n          } else {\n            delete path.path2d;\n          }\n          if (path.path2d || !_this2.raw) {\n            return \"continue\";\n          }\n          path.path2d = new Path2D();\n          path.path2d.moveTo(_this2.raw[0].x, _this2.raw[0].y);\n          _this2.raw.forEach(function (pos, i) {\n            var _a;\n            if (i > 0) {\n              (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n            }\n          });\n          path.path2d.closePath();\n        };\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _ret = _loop();\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"initRawData\",\n    value: function initRawData(force) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var options, data, svg, path, namespaces;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = this.options;\n                if (!options.url) {\n                  _context4.next = 7;\n                  break;\n                }\n                _context4.next = 4;\n                return this.downloadSvgPath(options.url, force);\n              case 4:\n                this.raw = _context4.sent;\n                _context4.next = 8;\n                break;\n              case 7:\n                if (options.data) {\n                  data = options.data;\n                  if (typeof data !== \"string\") {\n                    path = data.path instanceof Array ? data.path.map(function (t) {\n                      return \"<path d=\\\"\".concat(t, \"\\\" />\");\n                    }).join(\"\") : \"<path d=\\\"\".concat(data.path, \"\\\" />\");\n                    namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = \"<svg \".concat(namespaces, \" width=\\\"\").concat(data.size.width, \"\\\" height=\\\"\").concat(data.size.height, \"\\\">\").concat(path, \"</svg>\");\n                  } else {\n                    svg = data;\n                  }\n                  this.raw = this.parseSvgPath(svg, force);\n                }\n              case 8:\n                this.createPath2D();\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }]);\n  return PolygonMaskInstance;\n}();\nexports.PolygonMaskInstance = PolygonMaskInstance;","map":{"version":3,"names":["_regeneratorRuntime","require","_classCallCheck","_createClass","_createForOfIteratorHelper","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","PolygonMaskInstance","Enums_1","Utils_1","PolygonMask_1","OutModeDirection_1","drawPolygonMask","context","rawData","stroke","color","ColorUtils","colorToRgb","beginPath","moveTo","x","y","_iterator","_step","s","n","item","lineTo","err","f","closePath","strokeStyle","getStyleFromRgb","lineWidth","width","drawPolygonMaskPath","path","position","translate","opacity","parsePaths","paths","scale","offset","res","_iterator2","_step2","segments","element","pathSegList","len","numberOfItems","p","i","segment","getItem","svgPathSeg","window","SVGPathSeg","pathSegType","PATHSEG_MOVETO_ABS","PATHSEG_LINETO_ABS","PATHSEG_CURVETO_CUBIC_ABS","PATHSEG_CURVETO_QUADRATIC_ABS","PATHSEG_ARC_ABS","PATHSEG_CURVETO_CUBIC_SMOOTH_ABS","PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS","absSeg","PATHSEG_LINETO_HORIZONTAL_ABS","PATHSEG_LINETO_VERTICAL_ABS","PATHSEG_LINETO_REL","PATHSEG_MOVETO_REL","PATHSEG_CURVETO_CUBIC_REL","PATHSEG_CURVETO_QUADRATIC_REL","PATHSEG_ARC_REL","PATHSEG_CURVETO_CUBIC_SMOOTH_REL","PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL","relSeg","PATHSEG_LINETO_HORIZONTAL_REL","PATHSEG_LINETO_VERTICAL_REL","PATHSEG_UNKNOWN","PATHSEG_CLOSEPATH","push","calcClosestPtOnSegment","s1","s2","pos","_Utils_1$NumberUtils$","NumberUtils","getDistances","dx","dy","_Utils_1$NumberUtils$2","dxx","dyy","t","Math","pow","isOnSegment","segmentBounce","start","stop","velocity","_Utils_1$NumberUtils$3","wallAngle","atan2","wallNormalX","sin","wallNormalY","cos","d","container","dimension","height","path2DSupported","Path2D","options","PolygonMask","polygonMaskMoveRadius","move","radius","retina","pixelRatio","key","initAsync","mark","_callee","polygonMaskOptions","wrap","_callee$","_context","prev","load","polygon","enable","initRawData","resize","_this","type","Type","none","redrawTimeout","clearTimeout","setTimeout","_callee2","_callee2$","_context2","particles","redraw","raw","particlesInitialization","inline","arrangement","InlineArrangement","onePerPoint","perPoint","drawPoints","particlePosition","_a","_b","length","Utils","deepExtend","randomPoint","particleBounce","particle","delta","direction","polygonBounce","clickPositionValid","checkInsidePolygon","draw","polygonDraw","_iterator3","_step3","path2d","path2dSupported","OutModeDirection","top","inside","outside","closest","getPosition","getRadius","j","pi","pj","dist","_ref","distance","undefined","factor","mult","initialPosition","getDistance","Error","Constants","noPolygonFound","canvasSize","canvas","size","random","intersect","parseSvgPath","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","getTotalLength","pxRatio","parseFloat","getAttribute","downloadSvgPath","svgUrl","_callee3","url","req","_callee3$","_context3","abrupt","fetch","sent","ok","t0","text","t1","t2","call","_iterator4","_step4","addParticle","getRandomPoint","randomLength","getRandomPointByLength","equidistant","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","itemFromArray","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","_iterator5","_step5","pathDistance","createPath2D","_this2","_iterator6","_step6","_loop","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","forEach","_ret","_callee4","data","namespaces","_callee4$","_context4","Array","map","concat","join"],"sources":["C:/Users/matth/Desktop/dotDev/Portfolio/React Portfolio Website/node_modules/tsparticles/Plugins/PolygonMask/PolygonMaskInstance.js"],"sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PolygonMaskInstance = void 0;\r\nconst Enums_1 = require(\"./Enums\");\r\nconst Utils_1 = require(\"../../Utils\");\r\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\r\nconst OutModeDirection_1 = require(\"../../Enums/Directions/OutModeDirection\");\r\nfunction drawPolygonMask(context, rawData, stroke) {\r\n    const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\r\n    if (!color) {\r\n        return;\r\n    }\r\n    context.beginPath();\r\n    context.moveTo(rawData[0].x, rawData[0].y);\r\n    for (const item of rawData) {\r\n        context.lineTo(item.x, item.y);\r\n    }\r\n    context.closePath();\r\n    context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color);\r\n    context.lineWidth = stroke.width;\r\n    context.stroke();\r\n}\r\nfunction drawPolygonMaskPath(context, path, stroke, position) {\r\n    context.translate(position.x, position.y);\r\n    const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\r\n    if (!color) {\r\n        return;\r\n    }\r\n    context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color, stroke.opacity);\r\n    context.lineWidth = stroke.width;\r\n    context.stroke(path);\r\n}\r\nfunction parsePaths(paths, scale, offset) {\r\n    const res = [];\r\n    for (const path of paths) {\r\n        const segments = path.element.pathSegList;\r\n        const len = segments.numberOfItems;\r\n        const p = {\r\n            x: 0,\r\n            y: 0,\r\n        };\r\n        for (let i = 0; i < len; i++) {\r\n            const segment = segments.getItem(i);\r\n            const svgPathSeg = window.SVGPathSeg;\r\n            switch (segment.pathSegType) {\r\n                case svgPathSeg.PATHSEG_MOVETO_ABS:\r\n                case svgPathSeg.PATHSEG_LINETO_ABS:\r\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\r\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\r\n                case svgPathSeg.PATHSEG_ARC_ABS:\r\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\r\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: {\r\n                    const absSeg = segment;\r\n                    p.x = absSeg.x;\r\n                    p.y = absSeg.y;\r\n                    break;\r\n                }\r\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\r\n                    p.x = segment.x;\r\n                    break;\r\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\r\n                    p.y = segment.y;\r\n                    break;\r\n                case svgPathSeg.PATHSEG_LINETO_REL:\r\n                case svgPathSeg.PATHSEG_MOVETO_REL:\r\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\r\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\r\n                case svgPathSeg.PATHSEG_ARC_REL:\r\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\r\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: {\r\n                    const relSeg = segment;\r\n                    p.x += relSeg.x;\r\n                    p.y += relSeg.y;\r\n                    break;\r\n                }\r\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\r\n                    p.x += segment.x;\r\n                    break;\r\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\r\n                    p.y += segment.y;\r\n                    break;\r\n                case svgPathSeg.PATHSEG_UNKNOWN:\r\n                case svgPathSeg.PATHSEG_CLOSEPATH:\r\n                    continue;\r\n            }\r\n            res.push({\r\n                x: p.x * scale + offset.x,\r\n                y: p.y * scale + offset.y,\r\n            });\r\n        }\r\n    }\r\n    return res;\r\n}\r\nfunction calcClosestPtOnSegment(s1, s2, pos) {\r\n    const { dx, dy } = Utils_1.NumberUtils.getDistances(pos, s1);\r\n    const { dx: dxx, dy: dyy } = Utils_1.NumberUtils.getDistances(s2, s1);\r\n    const t = (dx * dxx + dy * dyy) / (Math.pow(dxx, 2) + Math.pow(dyy, 2));\r\n    let x = s1.x + dxx * t;\r\n    let y = s1.y + dyy * t;\r\n    if (t < 0) {\r\n        x = s1.x;\r\n        y = s1.y;\r\n    }\r\n    else if (t > 1) {\r\n        x = s2.x;\r\n        y = s2.y;\r\n    }\r\n    return { x: x, y: y, isOnSegment: t >= 0 && t <= 1 };\r\n}\r\nfunction segmentBounce(start, stop, velocity) {\r\n    const { dx, dy } = Utils_1.NumberUtils.getDistances(start, stop);\r\n    const wallAngle = Math.atan2(dy, dx);\r\n    const wallNormalX = Math.sin(wallAngle);\r\n    const wallNormalY = -Math.cos(wallAngle);\r\n    const d = 2 * (velocity.x * wallNormalX + velocity.y * wallNormalY);\r\n    velocity.x -= d * wallNormalX;\r\n    velocity.y -= d * wallNormalY;\r\n}\r\nclass PolygonMaskInstance {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.dimension = {\r\n            height: 0,\r\n            width: 0,\r\n        };\r\n        this.path2DSupported = !!window.Path2D;\r\n        this.options = new PolygonMask_1.PolygonMask();\r\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\r\n    }\r\n    initAsync(options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\r\n            const polygonMaskOptions = this.options;\r\n            this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\r\n            if (polygonMaskOptions.enable) {\r\n                yield this.initRawData();\r\n            }\r\n        });\r\n    }\r\n    resize() {\r\n        const container = this.container;\r\n        const options = this.options;\r\n        if (!(options.enable && options.type !== Enums_1.Type.none)) {\r\n            return;\r\n        }\r\n        if (this.redrawTimeout) {\r\n            clearTimeout(this.redrawTimeout);\r\n        }\r\n        this.redrawTimeout = window.setTimeout(() => __awaiter(this, void 0, void 0, function* () {\r\n            yield this.initRawData(true);\r\n            container.particles.redraw();\r\n        }), 250);\r\n    }\r\n    stop() {\r\n        delete this.raw;\r\n        delete this.paths;\r\n    }\r\n    particlesInitialization() {\r\n        const options = this.options;\r\n        if (options.enable &&\r\n            options.type === Enums_1.Type.inline &&\r\n            (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint ||\r\n                options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\r\n            this.drawPoints();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    particlePosition(position) {\r\n        var _a, _b;\r\n        const options = this.options;\r\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\r\n            return;\r\n        }\r\n        return Utils_1.Utils.deepExtend({}, position ? position : this.randomPoint());\r\n    }\r\n    particleBounce(particle, delta, direction) {\r\n        return this.polygonBounce(particle, delta, direction);\r\n    }\r\n    clickPositionValid(position) {\r\n        const options = this.options;\r\n        return (options.enable &&\r\n            options.type !== Enums_1.Type.none &&\r\n            options.type !== Enums_1.Type.inline &&\r\n            this.checkInsidePolygon(position));\r\n    }\r\n    draw(context) {\r\n        var _a;\r\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\r\n            return;\r\n        }\r\n        const options = this.options;\r\n        const polygonDraw = options.draw;\r\n        if (!(options.enable && polygonDraw.enable)) {\r\n            return;\r\n        }\r\n        const rawData = this.raw;\r\n        for (const path of this.paths) {\r\n            const path2d = path.path2d;\r\n            const path2dSupported = this.path2DSupported;\r\n            if (!context) {\r\n                continue;\r\n            }\r\n            if (path2dSupported && path2d && this.offset) {\r\n                drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\r\n            }\r\n            else if (rawData) {\r\n                drawPolygonMask(context, rawData, polygonDraw.stroke);\r\n            }\r\n        }\r\n    }\r\n    polygonBounce(particle, delta, direction) {\r\n        const options = this.options;\r\n        if (!this.raw || !options.enable || direction !== OutModeDirection_1.OutModeDirection.top) {\r\n            return false;\r\n        }\r\n        if (options.type === Enums_1.Type.inside || options.type === Enums_1.Type.outside) {\r\n            let closest, dx, dy;\r\n            const pos = particle.getPosition(), radius = particle.getRadius();\r\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\r\n                const pi = this.raw[i], pj = this.raw[j];\r\n                closest = calcClosestPtOnSegment(pi, pj, pos);\r\n                const dist = Utils_1.NumberUtils.getDistances(pos, closest);\r\n                [dx, dy] = [dist.dx, dist.dy];\r\n                if (dist.distance < radius) {\r\n                    segmentBounce(pi, pj, particle.velocity);\r\n                    return true;\r\n                }\r\n            }\r\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\r\n                const factor = { x: 1, y: 1 };\r\n                if (particle.position.x >= closest.x) {\r\n                    factor.x = -1;\r\n                }\r\n                if (particle.position.y >= closest.y) {\r\n                    factor.y = -1;\r\n                }\r\n                particle.position.x = closest.x + radius * 2 * factor.x;\r\n                particle.position.y = closest.y + radius * 2 * factor.y;\r\n                particle.velocity.mult(-1);\r\n                return true;\r\n            }\r\n        }\r\n        else if (options.type === Enums_1.Type.inline && particle.initialPosition) {\r\n            const dist = Utils_1.NumberUtils.getDistance(particle.initialPosition, particle.getPosition());\r\n            if (dist > this.polygonMaskMoveRadius) {\r\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\r\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    checkInsidePolygon(position) {\r\n        var _a, _b;\r\n        const container = this.container;\r\n        const options = this.options;\r\n        if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\r\n            return true;\r\n        }\r\n        if (!this.raw) {\r\n            throw new Error(Utils_1.Constants.noPolygonFound);\r\n        }\r\n        const canvasSize = container.canvas.size;\r\n        const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\r\n        const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\r\n        let inside = false;\r\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\r\n            const pi = this.raw[i];\r\n            const pj = this.raw[j];\r\n            const intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\r\n            if (intersect) {\r\n                inside = !inside;\r\n            }\r\n        }\r\n        return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\r\n    }\r\n    parseSvgPath(xml, force) {\r\n        var _a, _b, _c;\r\n        const forceDownload = force !== null && force !== void 0 ? force : false;\r\n        if (this.paths !== undefined && !forceDownload) {\r\n            return this.raw;\r\n        }\r\n        const container = this.container;\r\n        const options = this.options;\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(xml, \"image/svg+xml\");\r\n        const svg = doc.getElementsByTagName(\"svg\")[0];\r\n        let svgPaths = svg.getElementsByTagName(\"path\");\r\n        if (!svgPaths.length) {\r\n            svgPaths = doc.getElementsByTagName(\"path\");\r\n        }\r\n        this.paths = [];\r\n        for (let i = 0; i < svgPaths.length; i++) {\r\n            const path = svgPaths.item(i);\r\n            if (path) {\r\n                this.paths.push({\r\n                    element: path,\r\n                    length: path.getTotalLength(),\r\n                });\r\n            }\r\n        }\r\n        const pxRatio = container.retina.pixelRatio;\r\n        const scale = options.scale / pxRatio;\r\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\r\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\r\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\r\n            x: 50,\r\n            y: 50,\r\n        };\r\n        this.offset = {\r\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\r\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\r\n        };\r\n        return parsePaths(this.paths, scale, this.offset);\r\n    }\r\n    downloadSvgPath(svgUrl, force) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const options = this.options;\r\n            const url = svgUrl || options.url;\r\n            const forceDownload = force !== null && force !== void 0 ? force : false;\r\n            if (!url || (this.paths !== undefined && !forceDownload)) {\r\n                return this.raw;\r\n            }\r\n            const req = yield fetch(url);\r\n            if (!req.ok) {\r\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\r\n            }\r\n            return this.parseSvgPath(yield req.text(), force);\r\n        });\r\n    }\r\n    drawPoints() {\r\n        if (!this.raw) {\r\n            return;\r\n        }\r\n        for (const item of this.raw) {\r\n            this.container.particles.addParticle({\r\n                x: item.x,\r\n                y: item.y,\r\n            });\r\n        }\r\n    }\r\n    randomPoint() {\r\n        const container = this.container;\r\n        const options = this.options;\r\n        let position;\r\n        if (options.type === Enums_1.Type.inline) {\r\n            switch (options.inline.arrangement) {\r\n                case Enums_1.InlineArrangement.randomPoint:\r\n                    position = this.getRandomPoint();\r\n                    break;\r\n                case Enums_1.InlineArrangement.randomLength:\r\n                    position = this.getRandomPointByLength();\r\n                    break;\r\n                case Enums_1.InlineArrangement.equidistant:\r\n                    position = this.getEquidistantPointByIndex(container.particles.count);\r\n                    break;\r\n                case Enums_1.InlineArrangement.onePerPoint:\r\n                case Enums_1.InlineArrangement.perPoint:\r\n                default:\r\n                    position = this.getPointByIndex(container.particles.count);\r\n            }\r\n        }\r\n        else {\r\n            position = {\r\n                x: Math.random() * container.canvas.size.width,\r\n                y: Math.random() * container.canvas.size.height,\r\n            };\r\n        }\r\n        if (this.checkInsidePolygon(position)) {\r\n            return position;\r\n        }\r\n        else {\r\n            return this.randomPoint();\r\n        }\r\n    }\r\n    getRandomPoint() {\r\n        if (!this.raw || !this.raw.length) {\r\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\r\n        }\r\n        const coords = Utils_1.Utils.itemFromArray(this.raw);\r\n        return {\r\n            x: coords.x,\r\n            y: coords.y,\r\n        };\r\n    }\r\n    getRandomPointByLength() {\r\n        var _a, _b, _c;\r\n        const options = this.options;\r\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\r\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\r\n        }\r\n        const path = Utils_1.Utils.itemFromArray(this.paths);\r\n        const distance = Math.floor(Math.random() * path.length) + 1;\r\n        const point = path.element.getPointAtLength(distance);\r\n        return {\r\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\r\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\r\n        };\r\n    }\r\n    getEquidistantPointByIndex(index) {\r\n        var _a, _b, _c, _d, _e, _f, _g;\r\n        const options = this.container.actualOptions;\r\n        const polygonMaskOptions = this.options;\r\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\r\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\r\n        let offset = 0;\r\n        let point;\r\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\r\n        const distance = totalLength / options.particles.number.value;\r\n        for (const path of this.paths) {\r\n            const pathDistance = distance * index - offset;\r\n            if (pathDistance <= path.length) {\r\n                point = path.element.getPointAtLength(pathDistance);\r\n                break;\r\n            }\r\n            else {\r\n                offset += path.length;\r\n            }\r\n        }\r\n        return {\r\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\r\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\r\n        };\r\n    }\r\n    getPointByIndex(index) {\r\n        if (!this.raw || !this.raw.length) {\r\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\r\n        }\r\n        const coords = this.raw[index % this.raw.length];\r\n        return {\r\n            x: coords.x,\r\n            y: coords.y,\r\n        };\r\n    }\r\n    createPath2D() {\r\n        var _a, _b;\r\n        const options = this.options;\r\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\r\n            return;\r\n        }\r\n        for (const path of this.paths) {\r\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\r\n            if (pathData) {\r\n                const path2d = new Path2D(pathData);\r\n                const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\r\n                const finalPath = new Path2D();\r\n                const transform = matrix.scale(options.scale);\r\n                if (finalPath.addPath) {\r\n                    finalPath.addPath(path2d, transform);\r\n                    path.path2d = finalPath;\r\n                }\r\n                else {\r\n                    delete path.path2d;\r\n                }\r\n            }\r\n            else {\r\n                delete path.path2d;\r\n            }\r\n            if (path.path2d || !this.raw) {\r\n                continue;\r\n            }\r\n            path.path2d = new Path2D();\r\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\r\n            this.raw.forEach((pos, i) => {\r\n                var _a;\r\n                if (i > 0) {\r\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\r\n                }\r\n            });\r\n            path.path2d.closePath();\r\n        }\r\n    }\r\n    initRawData(force) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const options = this.options;\r\n            if (options.url) {\r\n                this.raw = yield this.downloadSvgPath(options.url, force);\r\n            }\r\n            else if (options.data) {\r\n                const data = options.data;\r\n                let svg;\r\n                if (typeof data !== \"string\") {\r\n                    const path = data.path instanceof Array\r\n                        ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\r\n                        : `<path d=\"${data.path}\" />`;\r\n                    const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\r\n                    svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\r\n                }\r\n                else {\r\n                    svg = data;\r\n                }\r\n                this.raw = this.parseSvgPath(svg, force);\r\n            }\r\n            this.createPath2D();\r\n        });\r\n    }\r\n}\r\nexports.PolygonMaskInstance = PolygonMaskInstance;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}