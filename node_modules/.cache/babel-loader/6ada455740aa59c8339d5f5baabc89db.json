{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/matth/Desktop/butnerDotDev/Portfolio/React Portfolio Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/matth/Desktop/butnerDotDev/Portfolio/React Portfolio Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/matth/Desktop/butnerDotDev/Portfolio/React Portfolio Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/matth/Desktop/butnerDotDev/Portfolio/React Portfolio Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Updater = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nfunction bounceHorizontal(data) {\n  if (!(data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceHorizontal || data.outMode === \"bounceHorizontal\" || data.outMode === Enums_1.OutMode.split)) {\n    return;\n  }\n\n  var velocity = data.particle.velocity.x;\n\n  if (!(data.direction === Enums_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0 || data.direction === Enums_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0)) {\n    return;\n  }\n\n  var newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.horizontal);\n  data.particle.velocity.x *= -newVelocity;\n  var minPos = data.offset.x + data.size;\n\n  if (data.bounds.right >= data.canvasSize.width) {\n    data.particle.position.x = data.canvasSize.width - minPos;\n  } else if (data.bounds.left <= 0) {\n    data.particle.position.x = minPos;\n  }\n\n  if (data.outMode === Enums_1.OutMode.split) {\n    data.particle.destroy();\n  }\n}\n\nfunction bounceVertical(data) {\n  if (!(data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceVertical || data.outMode === \"bounceVertical\" || data.outMode === Enums_1.OutMode.split)) {\n    return;\n  }\n\n  var velocity = data.particle.velocity.y;\n\n  if (!(data.direction === Enums_1.OutModeDirection.bottom && data.bounds.bottom >= data.canvasSize.height && velocity > 0 || data.direction === Enums_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0)) {\n    return;\n  }\n\n  var newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.vertical);\n  data.particle.velocity.y *= -newVelocity;\n  var minPos = data.offset.y + data.size;\n\n  if (data.bounds.bottom >= data.canvasSize.height) {\n    data.particle.position.y = data.canvasSize.height - minPos;\n  } else if (data.bounds.top <= 0) {\n    data.particle.position.y = minPos;\n  }\n\n  if (data.outMode === Enums_1.OutMode.split) {\n    data.particle.destroy();\n  }\n}\n\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n  switch (destroy) {\n    case Enums_1.DestroyType.max:\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n\n      break;\n\n    case Enums_1.DestroyType.min:\n      if (value <= minValue) {\n        particle.destroy();\n      }\n\n      break;\n  }\n}\n\nvar Updater = /*#__PURE__*/function () {\n  function Updater(container, particle) {\n    _classCallCheck(this, Updater);\n\n    this.container = container;\n    this.particle = particle;\n  }\n\n  _createClass(Updater, [{\n    key: \"update\",\n    value: function update(delta) {\n      if (this.particle.destroyed) {\n        return;\n      }\n\n      this.updateLife(delta);\n\n      if (this.particle.destroyed || this.particle.spawning) {\n        return;\n      }\n\n      this.updateOpacity(delta);\n      this.updateSize(delta);\n      this.updateAngle(delta);\n      this.updateTilt(delta);\n      this.updateRoll(delta);\n      this.updateWobble(delta);\n      this.updateColor(delta);\n      this.updateStrokeColor(delta);\n      this.updateOutModes(delta);\n    }\n  }, {\n    key: \"updateLife\",\n    value: function updateLife(delta) {\n      var particle = this.particle;\n      var justSpawned = false;\n\n      if (particle.spawning) {\n        particle.lifeDelayTime += delta.value;\n\n        if (particle.lifeDelayTime >= particle.lifeDelay) {\n          justSpawned = true;\n          particle.spawning = false;\n          particle.lifeDelayTime = 0;\n          particle.lifeTime = 0;\n        }\n      }\n\n      if (particle.lifeDuration === -1) {\n        return;\n      }\n\n      if (particle.spawning) {\n        return;\n      }\n\n      if (justSpawned) {\n        particle.lifeTime = 0;\n      } else {\n        particle.lifeTime += delta.value;\n      }\n\n      if (particle.lifeTime < particle.lifeDuration) {\n        return;\n      }\n\n      particle.lifeTime = 0;\n\n      if (particle.livesRemaining > 0) {\n        particle.livesRemaining--;\n      }\n\n      if (particle.livesRemaining === 0) {\n        particle.destroy();\n        return;\n      }\n\n      var canvasSize = this.container.canvas.size;\n      particle.position.x = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.width));\n      particle.position.y = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.height));\n      particle.spawning = true;\n      particle.lifeDelayTime = 0;\n      particle.lifeTime = 0;\n      particle.reset();\n      var lifeOptions = particle.options.life;\n      particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\n      particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\n    }\n  }, {\n    key: \"updateOpacity\",\n    value: function updateOpacity(delta) {\n      var _a, _b;\n\n      var particle = this.particle;\n      var opacityOpt = particle.options.opacity;\n      var opacityAnim = opacityOpt.animation;\n      var minValue = particle.opacity.min;\n      var maxValue = particle.opacity.max;\n\n      if (!(!particle.destroyed && opacityAnim.enable && (opacityAnim.count <= 0 || particle.loops.opacity < opacityAnim.count))) {\n        return;\n      }\n\n      switch (particle.opacity.status) {\n        case Enums_1.AnimationStatus.increasing:\n          if (particle.opacity.value >= maxValue) {\n            particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n            particle.loops.opacity++;\n          } else {\n            particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n          }\n\n          break;\n\n        case Enums_1.AnimationStatus.decreasing:\n          if (particle.opacity.value <= minValue) {\n            particle.opacity.status = Enums_1.AnimationStatus.increasing;\n            particle.loops.opacity++;\n          } else {\n            particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n          }\n\n          break;\n      }\n\n      checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n\n      if (!particle.destroyed) {\n        particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\n      }\n    }\n  }, {\n    key: \"updateSize\",\n    value: function updateSize(delta) {\n      var _a;\n\n      var particle = this.particle;\n      var sizeOpt = particle.options.size;\n      var sizeAnim = sizeOpt.animation;\n      var sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n      var minValue = particle.size.min;\n      var maxValue = particle.size.max;\n\n      if (!(!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count))) {\n        return;\n      }\n\n      switch (particle.size.status) {\n        case Enums_1.AnimationStatus.increasing:\n          if (particle.size.value >= maxValue) {\n            particle.size.status = Enums_1.AnimationStatus.decreasing;\n            particle.loops.size++;\n          } else {\n            particle.size.value += sizeVelocity;\n          }\n\n          break;\n\n        case Enums_1.AnimationStatus.decreasing:\n          if (particle.size.value <= minValue) {\n            particle.size.status = Enums_1.AnimationStatus.increasing;\n            particle.loops.size++;\n          } else {\n            particle.size.value -= sizeVelocity;\n          }\n\n      }\n\n      checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n\n      if (!particle.destroyed) {\n        particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\n      }\n    }\n  }, {\n    key: \"updateAngle\",\n    value: function updateAngle(delta) {\n      var _a;\n\n      var particle = this.particle;\n      var rotate = particle.options.rotate;\n      var rotateAnimation = rotate.animation;\n      var speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n      var max = 2 * Math.PI;\n\n      if (!rotateAnimation.enable) {\n        return;\n      }\n\n      switch (particle.rotate.status) {\n        case Enums_1.AnimationStatus.increasing:\n          particle.rotate.value += speed;\n\n          if (particle.rotate.value > max) {\n            particle.rotate.value -= max;\n          }\n\n          break;\n\n        case Enums_1.AnimationStatus.decreasing:\n        default:\n          particle.rotate.value -= speed;\n\n          if (particle.rotate.value < 0) {\n            particle.rotate.value += max;\n          }\n\n          break;\n      }\n    }\n  }, {\n    key: \"updateTilt\",\n    value: function updateTilt(delta) {\n      var _a;\n\n      var particle = this.particle;\n      var tilt = particle.options.tilt;\n      var tiltAnimation = tilt.animation;\n      var speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n      var max = 2 * Math.PI;\n\n      if (!tiltAnimation.enable) {\n        return;\n      }\n\n      switch (particle.tilt.status) {\n        case Enums_1.AnimationStatus.increasing:\n          particle.tilt.value += speed;\n\n          if (particle.tilt.value > max) {\n            particle.tilt.value -= max;\n          }\n\n          break;\n\n        case Enums_1.AnimationStatus.decreasing:\n        default:\n          particle.tilt.value -= speed;\n\n          if (particle.tilt.value < 0) {\n            particle.tilt.value += max;\n          }\n\n          break;\n      }\n    }\n  }, {\n    key: \"updateRoll\",\n    value: function updateRoll(delta) {\n      var particle = this.particle;\n      var roll = particle.options.roll;\n      var speed = particle.rollSpeed * delta.factor;\n      var max = 2 * Math.PI;\n\n      if (!roll.enable) {\n        return;\n      }\n\n      particle.rollAngle += speed;\n\n      if (particle.rollAngle > max) {\n        particle.rollAngle -= max;\n      }\n    }\n  }, {\n    key: \"updateWobble\",\n    value: function updateWobble(delta) {\n      var particle = this.particle;\n      var wobble = particle.options.wobble;\n      var speed = particle.wobbleSpeed * delta.factor;\n      var distance = particle.wobbleDistance * delta.factor / (1000 / 60);\n      var max = 2 * Math.PI;\n\n      if (!wobble.enable) {\n        return;\n      }\n\n      particle.wobbleAngle += speed;\n\n      if (particle.wobbleAngle > max) {\n        particle.wobbleAngle -= max;\n      }\n\n      particle.position.x += distance * Math.cos(particle.wobbleAngle);\n      particle.position.y += distance * Math.abs(Math.sin(particle.wobbleAngle));\n    }\n  }, {\n    key: \"updateColor\",\n    value: function updateColor(delta) {\n      var _a, _b, _c;\n\n      var particle = this.particle;\n      var animationOptions = particle.options.color.animation;\n\n      if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {\n        this.updateColorValue(particle, delta, particle.color.h, animationOptions.h, 360, false);\n      }\n\n      if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {\n        this.updateColorValue(particle, delta, particle.color.s, animationOptions.s, 100, true);\n      }\n\n      if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {\n        this.updateColorValue(particle, delta, particle.color.l, animationOptions.l, 100, true);\n      }\n    }\n  }, {\n    key: \"updateStrokeColor\",\n    value: function updateStrokeColor(delta) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n\n      var particle = this.particle;\n\n      if (!particle.stroke.color) {\n        return;\n      }\n\n      var animationOptions = particle.stroke.color.animation;\n      var valueAnimations = animationOptions;\n\n      if (valueAnimations.enable !== undefined) {\n        var hue = (_b = (_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h) !== null && _b !== void 0 ? _b : (_c = particle.color) === null || _c === void 0 ? void 0 : _c.h;\n\n        if (hue) {\n          this.updateColorValue(particle, delta, hue, valueAnimations, 360, false);\n        }\n      } else {\n        var hslAnimations = animationOptions;\n        var h = (_e = (_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.h) !== null && _e !== void 0 ? _e : (_f = particle.color) === null || _f === void 0 ? void 0 : _f.h;\n\n        if (h) {\n          this.updateColorValue(particle, delta, h, hslAnimations.h, 360, false);\n        }\n\n        var s = (_h = (_g = particle.strokeColor) === null || _g === void 0 ? void 0 : _g.s) !== null && _h !== void 0 ? _h : (_j = particle.color) === null || _j === void 0 ? void 0 : _j.s;\n\n        if (s) {\n          this.updateColorValue(particle, delta, s, hslAnimations.s, 100, true);\n        }\n\n        var l = (_l = (_k = particle.strokeColor) === null || _k === void 0 ? void 0 : _k.l) !== null && _l !== void 0 ? _l : (_m = particle.color) === null || _m === void 0 ? void 0 : _m.l;\n\n        if (l) {\n          this.updateColorValue(particle, delta, l, hslAnimations.l, 100, true);\n        }\n      }\n    }\n  }, {\n    key: \"updateColorValue\",\n    value: function updateColorValue(particle, delta, value, valueAnimation, max, decrease) {\n      var _a;\n\n      var colorValue = value;\n\n      if (!colorValue || !valueAnimation.enable) {\n        return;\n      }\n\n      var offset = Utils_1.NumberUtils.randomInRange(valueAnimation.offset);\n      var velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\n\n      if (!decrease || colorValue.status === Enums_1.AnimationStatus.increasing) {\n        colorValue.value += velocity;\n\n        if (decrease && colorValue.value > max) {\n          colorValue.status = Enums_1.AnimationStatus.decreasing;\n          colorValue.value -= colorValue.value % max;\n        }\n      } else {\n        colorValue.value -= velocity;\n\n        if (colorValue.value < 0) {\n          colorValue.status = Enums_1.AnimationStatus.increasing;\n          colorValue.value += colorValue.value;\n        }\n      }\n\n      if (colorValue.value > max) {\n        colorValue.value %= max;\n      }\n    }\n  }, {\n    key: \"updateOutModes\",\n    value: function updateOutModes(delta) {\n      var _a, _b, _c, _d;\n\n      var outModes = this.particle.options.move.outModes;\n      this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n      this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n      this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n      this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n    }\n  }, {\n    key: \"updateOutMode\",\n    value: function updateOutMode(delta, outMode, direction) {\n      var container = this.container;\n      var particle = this.particle;\n\n      switch (outMode) {\n        case Enums_1.OutMode.bounce:\n        case Enums_1.OutMode.bounceVertical:\n        case Enums_1.OutMode.bounceHorizontal:\n        case \"bounceVertical\":\n        case \"bounceHorizontal\":\n        case Enums_1.OutMode.split:\n          this.updateBounce(delta, direction, outMode);\n          break;\n\n        case Enums_1.OutMode.destroy:\n          if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            container.particles.remove(particle, true);\n          }\n\n          break;\n\n        case Enums_1.OutMode.out:\n          if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            this.fixOutOfCanvasPosition(direction);\n          }\n\n          break;\n\n        case Enums_1.OutMode.none:\n          this.bounceNone(direction);\n          break;\n      }\n    }\n  }, {\n    key: \"fixOutOfCanvasPosition\",\n    value: function fixOutOfCanvasPosition(direction) {\n      var container = this.container;\n      var particle = this.particle;\n      var wrap = particle.options.move.warp;\n      var canvasSize = container.canvas.size;\n      var newPos = {\n        bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n        left: -particle.getRadius() - particle.offset.x,\n        right: canvasSize.width + particle.getRadius() + particle.offset.x,\n        top: -particle.getRadius() - particle.offset.y\n      };\n      var sizeValue = particle.getRadius();\n      var nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n\n      if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n        particle.position.x = newPos.left;\n\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n        }\n      } else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n        particle.position.x = newPos.right;\n\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n        }\n      }\n\n      if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n        }\n\n        particle.position.y = newPos.top;\n      } else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n        }\n\n        particle.position.y = newPos.bottom;\n      }\n    }\n  }, {\n    key: \"updateBounce\",\n    value: function updateBounce(delta, direction, outMode) {\n      var container = this.container;\n      var particle = this.particle;\n      var handled = false;\n\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particleBounce !== undefined) {\n            handled = plugin.particleBounce(particle, delta, direction);\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (handled) {\n        return;\n      }\n\n      var pos = particle.getPosition(),\n          offset = particle.offset,\n          size = particle.getRadius(),\n          bounds = Utils_1.Utils.calculateBounds(pos, size),\n          canvasSize = container.canvas.size;\n      bounceHorizontal({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n      bounceVertical({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n    }\n  }, {\n    key: \"bounceNone\",\n    value: function bounceNone(direction) {\n      var particle = this.particle;\n\n      if (particle.options.move.distance) {\n        return;\n      }\n\n      var gravityOptions = particle.options.move.gravity;\n      var container = this.container;\n\n      if (!gravityOptions.enable) {\n        if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          container.particles.remove(particle);\n        }\n      } else {\n        var position = particle.position;\n\n        if (gravityOptions.acceleration >= 0 && position.y > container.canvas.size.height && direction === Enums_1.OutModeDirection.bottom || gravityOptions.acceleration < 0 && position.y < 0 && direction === Enums_1.OutModeDirection.top) {\n          container.particles.remove(particle);\n        }\n      }\n    }\n  }]);\n\n  return Updater;\n}();\n\nexports.Updater = Updater;","map":{"version":3,"sources":["C:/Users/matth/Desktop/butnerDotDev/Portfolio/React Portfolio Website/node_modules/tsparticles/Core/Particle/Updater.js"],"names":["Object","defineProperty","exports","value","Updater","Utils_1","require","Enums_1","bounceHorizontal","data","outMode","OutMode","bounce","split","velocity","particle","x","direction","OutModeDirection","right","bounds","canvasSize","width","left","newVelocity","NumberUtils","getValue","options","horizontal","minPos","offset","size","position","destroy","bounceVertical","y","bottom","height","top","vertical","checkDestroy","minValue","maxValue","DestroyType","max","min","container","delta","destroyed","updateLife","spawning","updateOpacity","updateSize","updateAngle","updateTilt","updateRoll","updateWobble","updateColor","updateStrokeColor","updateOutModes","justSpawned","lifeDelayTime","lifeDelay","lifeTime","lifeDuration","livesRemaining","canvas","randomInRange","setRangeValue","reset","lifeOptions","life","delay","duration","_a","_b","opacityOpt","opacity","opacityAnim","animation","enable","count","loops","status","AnimationStatus","increasing","decreasing","factor","clamp","sizeOpt","sizeAnim","sizeVelocity","rotate","rotateAnimation","speed","Math","PI","tilt","tiltAnimation","roll","rollSpeed","rollAngle","wobble","wobbleSpeed","distance","wobbleDistance","wobbleAngle","cos","abs","sin","_c","animationOptions","color","h","undefined","updateColorValue","s","l","_d","_e","_f","_g","_h","_j","_k","_l","_m","stroke","valueAnimations","hue","strokeColor","hslAnimations","valueAnimation","decrease","colorValue","outModes","move","updateOutMode","default","updateBounce","Utils","isPointInside","getRadius","particles","remove","out","fixOutOfCanvasPosition","none","bounceNone","wrap","warp","newPos","sizeValue","nextBounds","calculateBounds","random","handled","plugins","plugin","particleBounce","pos","getPosition","gravityOptions","gravity","acceleration"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Updater = void 0;\r\nconst Utils_1 = require(\"../../Utils\");\r\nconst Enums_1 = require(\"../../Enums\");\r\nfunction bounceHorizontal(data) {\r\n    if (!(data.outMode === Enums_1.OutMode.bounce ||\r\n        data.outMode === Enums_1.OutMode.bounceHorizontal ||\r\n        data.outMode === \"bounceHorizontal\" ||\r\n        data.outMode === Enums_1.OutMode.split)) {\r\n        return;\r\n    }\r\n    const velocity = data.particle.velocity.x;\r\n    if (!((data.direction === Enums_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\r\n        (data.direction === Enums_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0))) {\r\n        return;\r\n    }\r\n    const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.horizontal);\r\n    data.particle.velocity.x *= -newVelocity;\r\n    const minPos = data.offset.x + data.size;\r\n    if (data.bounds.right >= data.canvasSize.width) {\r\n        data.particle.position.x = data.canvasSize.width - minPos;\r\n    }\r\n    else if (data.bounds.left <= 0) {\r\n        data.particle.position.x = minPos;\r\n    }\r\n    if (data.outMode === Enums_1.OutMode.split) {\r\n        data.particle.destroy();\r\n    }\r\n}\r\nfunction bounceVertical(data) {\r\n    if (!(data.outMode === Enums_1.OutMode.bounce ||\r\n        data.outMode === Enums_1.OutMode.bounceVertical ||\r\n        data.outMode === \"bounceVertical\" ||\r\n        data.outMode === Enums_1.OutMode.split)) {\r\n        return;\r\n    }\r\n    const velocity = data.particle.velocity.y;\r\n    if (!((data.direction === Enums_1.OutModeDirection.bottom &&\r\n        data.bounds.bottom >= data.canvasSize.height &&\r\n        velocity > 0) ||\r\n        (data.direction === Enums_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0))) {\r\n        return;\r\n    }\r\n    const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.vertical);\r\n    data.particle.velocity.y *= -newVelocity;\r\n    const minPos = data.offset.y + data.size;\r\n    if (data.bounds.bottom >= data.canvasSize.height) {\r\n        data.particle.position.y = data.canvasSize.height - minPos;\r\n    }\r\n    else if (data.bounds.top <= 0) {\r\n        data.particle.position.y = minPos;\r\n    }\r\n    if (data.outMode === Enums_1.OutMode.split) {\r\n        data.particle.destroy();\r\n    }\r\n}\r\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\r\n    switch (destroy) {\r\n        case Enums_1.DestroyType.max:\r\n            if (value >= maxValue) {\r\n                particle.destroy();\r\n            }\r\n            break;\r\n        case Enums_1.DestroyType.min:\r\n            if (value <= minValue) {\r\n                particle.destroy();\r\n            }\r\n            break;\r\n    }\r\n}\r\nclass Updater {\r\n    constructor(container, particle) {\r\n        this.container = container;\r\n        this.particle = particle;\r\n    }\r\n    update(delta) {\r\n        if (this.particle.destroyed) {\r\n            return;\r\n        }\r\n        this.updateLife(delta);\r\n        if (this.particle.destroyed || this.particle.spawning) {\r\n            return;\r\n        }\r\n        this.updateOpacity(delta);\r\n        this.updateSize(delta);\r\n        this.updateAngle(delta);\r\n        this.updateTilt(delta);\r\n        this.updateRoll(delta);\r\n        this.updateWobble(delta);\r\n        this.updateColor(delta);\r\n        this.updateStrokeColor(delta);\r\n        this.updateOutModes(delta);\r\n    }\r\n    updateLife(delta) {\r\n        const particle = this.particle;\r\n        let justSpawned = false;\r\n        if (particle.spawning) {\r\n            particle.lifeDelayTime += delta.value;\r\n            if (particle.lifeDelayTime >= particle.lifeDelay) {\r\n                justSpawned = true;\r\n                particle.spawning = false;\r\n                particle.lifeDelayTime = 0;\r\n                particle.lifeTime = 0;\r\n            }\r\n        }\r\n        if (particle.lifeDuration === -1) {\r\n            return;\r\n        }\r\n        if (particle.spawning) {\r\n            return;\r\n        }\r\n        if (justSpawned) {\r\n            particle.lifeTime = 0;\r\n        }\r\n        else {\r\n            particle.lifeTime += delta.value;\r\n        }\r\n        if (particle.lifeTime < particle.lifeDuration) {\r\n            return;\r\n        }\r\n        particle.lifeTime = 0;\r\n        if (particle.livesRemaining > 0) {\r\n            particle.livesRemaining--;\r\n        }\r\n        if (particle.livesRemaining === 0) {\r\n            particle.destroy();\r\n            return;\r\n        }\r\n        const canvasSize = this.container.canvas.size;\r\n        particle.position.x = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.width));\r\n        particle.position.y = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.height));\r\n        particle.spawning = true;\r\n        particle.lifeDelayTime = 0;\r\n        particle.lifeTime = 0;\r\n        particle.reset();\r\n        const lifeOptions = particle.options.life;\r\n        particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\r\n        particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\r\n    }\r\n    updateOpacity(delta) {\r\n        var _a, _b;\r\n        const particle = this.particle;\r\n        const opacityOpt = particle.options.opacity;\r\n        const opacityAnim = opacityOpt.animation;\r\n        const minValue = particle.opacity.min;\r\n        const maxValue = particle.opacity.max;\r\n        if (!(!particle.destroyed &&\r\n            opacityAnim.enable &&\r\n            (opacityAnim.count <= 0 || particle.loops.opacity < opacityAnim.count))) {\r\n            return;\r\n        }\r\n        switch (particle.opacity.status) {\r\n            case Enums_1.AnimationStatus.increasing:\r\n                if (particle.opacity.value >= maxValue) {\r\n                    particle.opacity.status = Enums_1.AnimationStatus.decreasing;\r\n                    particle.loops.opacity++;\r\n                }\r\n                else {\r\n                    particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\r\n                }\r\n                break;\r\n            case Enums_1.AnimationStatus.decreasing:\r\n                if (particle.opacity.value <= minValue) {\r\n                    particle.opacity.status = Enums_1.AnimationStatus.increasing;\r\n                    particle.loops.opacity++;\r\n                }\r\n                else {\r\n                    particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\r\n                }\r\n                break;\r\n        }\r\n        checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\r\n        if (!particle.destroyed) {\r\n            particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\r\n        }\r\n    }\r\n    updateSize(delta) {\r\n        var _a;\r\n        const particle = this.particle;\r\n        const sizeOpt = particle.options.size;\r\n        const sizeAnim = sizeOpt.animation;\r\n        const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\r\n        const minValue = particle.size.min;\r\n        const maxValue = particle.size.max;\r\n        if (!(!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count))) {\r\n            return;\r\n        }\r\n        switch (particle.size.status) {\r\n            case Enums_1.AnimationStatus.increasing:\r\n                if (particle.size.value >= maxValue) {\r\n                    particle.size.status = Enums_1.AnimationStatus.decreasing;\r\n                    particle.loops.size++;\r\n                }\r\n                else {\r\n                    particle.size.value += sizeVelocity;\r\n                }\r\n                break;\r\n            case Enums_1.AnimationStatus.decreasing:\r\n                if (particle.size.value <= minValue) {\r\n                    particle.size.status = Enums_1.AnimationStatus.increasing;\r\n                    particle.loops.size++;\r\n                }\r\n                else {\r\n                    particle.size.value -= sizeVelocity;\r\n                }\r\n        }\r\n        checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\r\n        if (!particle.destroyed) {\r\n            particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\r\n        }\r\n    }\r\n    updateAngle(delta) {\r\n        var _a;\r\n        const particle = this.particle;\r\n        const rotate = particle.options.rotate;\r\n        const rotateAnimation = rotate.animation;\r\n        const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\r\n        const max = 2 * Math.PI;\r\n        if (!rotateAnimation.enable) {\r\n            return;\r\n        }\r\n        switch (particle.rotate.status) {\r\n            case Enums_1.AnimationStatus.increasing:\r\n                particle.rotate.value += speed;\r\n                if (particle.rotate.value > max) {\r\n                    particle.rotate.value -= max;\r\n                }\r\n                break;\r\n            case Enums_1.AnimationStatus.decreasing:\r\n            default:\r\n                particle.rotate.value -= speed;\r\n                if (particle.rotate.value < 0) {\r\n                    particle.rotate.value += max;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    updateTilt(delta) {\r\n        var _a;\r\n        const particle = this.particle;\r\n        const tilt = particle.options.tilt;\r\n        const tiltAnimation = tilt.animation;\r\n        const speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\r\n        const max = 2 * Math.PI;\r\n        if (!tiltAnimation.enable) {\r\n            return;\r\n        }\r\n        switch (particle.tilt.status) {\r\n            case Enums_1.AnimationStatus.increasing:\r\n                particle.tilt.value += speed;\r\n                if (particle.tilt.value > max) {\r\n                    particle.tilt.value -= max;\r\n                }\r\n                break;\r\n            case Enums_1.AnimationStatus.decreasing:\r\n            default:\r\n                particle.tilt.value -= speed;\r\n                if (particle.tilt.value < 0) {\r\n                    particle.tilt.value += max;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    updateRoll(delta) {\r\n        const particle = this.particle;\r\n        const roll = particle.options.roll;\r\n        const speed = particle.rollSpeed * delta.factor;\r\n        const max = 2 * Math.PI;\r\n        if (!roll.enable) {\r\n            return;\r\n        }\r\n        particle.rollAngle += speed;\r\n        if (particle.rollAngle > max) {\r\n            particle.rollAngle -= max;\r\n        }\r\n    }\r\n    updateWobble(delta) {\r\n        const particle = this.particle;\r\n        const wobble = particle.options.wobble;\r\n        const speed = particle.wobbleSpeed * delta.factor;\r\n        const distance = (particle.wobbleDistance * delta.factor) / (1000 / 60);\r\n        const max = 2 * Math.PI;\r\n        if (!wobble.enable) {\r\n            return;\r\n        }\r\n        particle.wobbleAngle += speed;\r\n        if (particle.wobbleAngle > max) {\r\n            particle.wobbleAngle -= max;\r\n        }\r\n        particle.position.x += distance * Math.cos(particle.wobbleAngle);\r\n        particle.position.y += distance * Math.abs(Math.sin(particle.wobbleAngle));\r\n    }\r\n    updateColor(delta) {\r\n        var _a, _b, _c;\r\n        const particle = this.particle;\r\n        const animationOptions = particle.options.color.animation;\r\n        if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {\r\n            this.updateColorValue(particle, delta, particle.color.h, animationOptions.h, 360, false);\r\n        }\r\n        if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {\r\n            this.updateColorValue(particle, delta, particle.color.s, animationOptions.s, 100, true);\r\n        }\r\n        if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {\r\n            this.updateColorValue(particle, delta, particle.color.l, animationOptions.l, 100, true);\r\n        }\r\n    }\r\n    updateStrokeColor(delta) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\r\n        const particle = this.particle;\r\n        if (!particle.stroke.color) {\r\n            return;\r\n        }\r\n        const animationOptions = particle.stroke.color.animation;\r\n        const valueAnimations = animationOptions;\r\n        if (valueAnimations.enable !== undefined) {\r\n            const hue = (_b = (_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h) !== null && _b !== void 0 ? _b : (_c = particle.color) === null || _c === void 0 ? void 0 : _c.h;\r\n            if (hue) {\r\n                this.updateColorValue(particle, delta, hue, valueAnimations, 360, false);\r\n            }\r\n        }\r\n        else {\r\n            const hslAnimations = animationOptions;\r\n            const h = (_e = (_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.h) !== null && _e !== void 0 ? _e : (_f = particle.color) === null || _f === void 0 ? void 0 : _f.h;\r\n            if (h) {\r\n                this.updateColorValue(particle, delta, h, hslAnimations.h, 360, false);\r\n            }\r\n            const s = (_h = (_g = particle.strokeColor) === null || _g === void 0 ? void 0 : _g.s) !== null && _h !== void 0 ? _h : (_j = particle.color) === null || _j === void 0 ? void 0 : _j.s;\r\n            if (s) {\r\n                this.updateColorValue(particle, delta, s, hslAnimations.s, 100, true);\r\n            }\r\n            const l = (_l = (_k = particle.strokeColor) === null || _k === void 0 ? void 0 : _k.l) !== null && _l !== void 0 ? _l : (_m = particle.color) === null || _m === void 0 ? void 0 : _m.l;\r\n            if (l) {\r\n                this.updateColorValue(particle, delta, l, hslAnimations.l, 100, true);\r\n            }\r\n        }\r\n    }\r\n    updateColorValue(particle, delta, value, valueAnimation, max, decrease) {\r\n        var _a;\r\n        const colorValue = value;\r\n        if (!colorValue || !valueAnimation.enable) {\r\n            return;\r\n        }\r\n        const offset = Utils_1.NumberUtils.randomInRange(valueAnimation.offset);\r\n        const velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\r\n        if (!decrease || colorValue.status === Enums_1.AnimationStatus.increasing) {\r\n            colorValue.value += velocity;\r\n            if (decrease && colorValue.value > max) {\r\n                colorValue.status = Enums_1.AnimationStatus.decreasing;\r\n                colorValue.value -= colorValue.value % max;\r\n            }\r\n        }\r\n        else {\r\n            colorValue.value -= velocity;\r\n            if (colorValue.value < 0) {\r\n                colorValue.status = Enums_1.AnimationStatus.increasing;\r\n                colorValue.value += colorValue.value;\r\n            }\r\n        }\r\n        if (colorValue.value > max) {\r\n            colorValue.value %= max;\r\n        }\r\n    }\r\n    updateOutModes(delta) {\r\n        var _a, _b, _c, _d;\r\n        const outModes = this.particle.options.move.outModes;\r\n        this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\r\n        this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\r\n        this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\r\n        this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\r\n    }\r\n    updateOutMode(delta, outMode, direction) {\r\n        const container = this.container;\r\n        const particle = this.particle;\r\n        switch (outMode) {\r\n            case Enums_1.OutMode.bounce:\r\n            case Enums_1.OutMode.bounceVertical:\r\n            case Enums_1.OutMode.bounceHorizontal:\r\n            case \"bounceVertical\":\r\n            case \"bounceHorizontal\":\r\n            case Enums_1.OutMode.split:\r\n                this.updateBounce(delta, direction, outMode);\r\n                break;\r\n            case Enums_1.OutMode.destroy:\r\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\r\n                    container.particles.remove(particle, true);\r\n                }\r\n                break;\r\n            case Enums_1.OutMode.out:\r\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\r\n                    this.fixOutOfCanvasPosition(direction);\r\n                }\r\n                break;\r\n            case Enums_1.OutMode.none:\r\n                this.bounceNone(direction);\r\n                break;\r\n        }\r\n    }\r\n    fixOutOfCanvasPosition(direction) {\r\n        const container = this.container;\r\n        const particle = this.particle;\r\n        const wrap = particle.options.move.warp;\r\n        const canvasSize = container.canvas.size;\r\n        const newPos = {\r\n            bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\r\n            left: -particle.getRadius() - particle.offset.x,\r\n            right: canvasSize.width + particle.getRadius() + particle.offset.x,\r\n            top: -particle.getRadius() - particle.offset.y,\r\n        };\r\n        const sizeValue = particle.getRadius();\r\n        const nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\r\n        if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\r\n            particle.position.x = newPos.left;\r\n            if (!wrap) {\r\n                particle.position.y = Math.random() * canvasSize.height;\r\n            }\r\n        }\r\n        else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\r\n            particle.position.x = newPos.right;\r\n            if (!wrap) {\r\n                particle.position.y = Math.random() * canvasSize.height;\r\n            }\r\n        }\r\n        if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\r\n            if (!wrap) {\r\n                particle.position.x = Math.random() * canvasSize.width;\r\n            }\r\n            particle.position.y = newPos.top;\r\n        }\r\n        else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\r\n            if (!wrap) {\r\n                particle.position.x = Math.random() * canvasSize.width;\r\n            }\r\n            particle.position.y = newPos.bottom;\r\n        }\r\n    }\r\n    updateBounce(delta, direction, outMode) {\r\n        const container = this.container;\r\n        const particle = this.particle;\r\n        let handled = false;\r\n        for (const [, plugin] of container.plugins) {\r\n            if (plugin.particleBounce !== undefined) {\r\n                handled = plugin.particleBounce(particle, delta, direction);\r\n            }\r\n            if (handled) {\r\n                break;\r\n            }\r\n        }\r\n        if (handled) {\r\n            return;\r\n        }\r\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = Utils_1.Utils.calculateBounds(pos, size), canvasSize = container.canvas.size;\r\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\r\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\r\n    }\r\n    bounceNone(direction) {\r\n        const particle = this.particle;\r\n        if (particle.options.move.distance) {\r\n            return;\r\n        }\r\n        const gravityOptions = particle.options.move.gravity;\r\n        const container = this.container;\r\n        if (!gravityOptions.enable) {\r\n            if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\r\n                container.particles.remove(particle);\r\n            }\r\n        }\r\n        else {\r\n            const position = particle.position;\r\n            if ((gravityOptions.acceleration >= 0 &&\r\n                position.y > container.canvas.size.height &&\r\n                direction === Enums_1.OutModeDirection.bottom) ||\r\n                (gravityOptions.acceleration < 0 && position.y < 0 && direction === Enums_1.OutModeDirection.top)) {\r\n                container.particles.remove(particle);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.Updater = Updater;\r\n"]},"metadata":{},"sourceType":"script"}