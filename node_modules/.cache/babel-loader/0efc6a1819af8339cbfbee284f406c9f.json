{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/matth/Desktop/dotDev/Portfolio/React Portfolio Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _createForOfIteratorHelper = require(\"C:/Users/matth/Desktop/dotDev/Portfolio/React Portfolio Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\nvar _classCallCheck = require(\"C:/Users/matth/Desktop/dotDev/Portfolio/React Portfolio Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:/Users/matth/Desktop/dotDev/Portfolio/React Portfolio Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Updater = void 0;\nvar Utils_1 = require(\"../../Utils\");\nvar Enums_1 = require(\"../../Enums\");\nfunction bounceHorizontal(data) {\n  if (!(data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceHorizontal || data.outMode === \"bounceHorizontal\" || data.outMode === Enums_1.OutMode.split)) {\n    return;\n  }\n  var velocity = data.particle.velocity.x;\n  if (!(data.direction === Enums_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0 || data.direction === Enums_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0)) {\n    return;\n  }\n  var newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.horizontal);\n  data.particle.velocity.x *= -newVelocity;\n  var minPos = data.offset.x + data.size;\n  if (data.bounds.right >= data.canvasSize.width) {\n    data.particle.position.x = data.canvasSize.width - minPos;\n  } else if (data.bounds.left <= 0) {\n    data.particle.position.x = minPos;\n  }\n  if (data.outMode === Enums_1.OutMode.split) {\n    data.particle.destroy();\n  }\n}\nfunction bounceVertical(data) {\n  if (!(data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceVertical || data.outMode === \"bounceVertical\" || data.outMode === Enums_1.OutMode.split)) {\n    return;\n  }\n  var velocity = data.particle.velocity.y;\n  if (!(data.direction === Enums_1.OutModeDirection.bottom && data.bounds.bottom >= data.canvasSize.height && velocity > 0 || data.direction === Enums_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0)) {\n    return;\n  }\n  var newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.vertical);\n  data.particle.velocity.y *= -newVelocity;\n  var minPos = data.offset.y + data.size;\n  if (data.bounds.bottom >= data.canvasSize.height) {\n    data.particle.position.y = data.canvasSize.height - minPos;\n  } else if (data.bounds.top <= 0) {\n    data.particle.position.y = minPos;\n  }\n  if (data.outMode === Enums_1.OutMode.split) {\n    data.particle.destroy();\n  }\n}\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n  switch (destroy) {\n    case Enums_1.DestroyType.max:\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n      break;\n    case Enums_1.DestroyType.min:\n      if (value <= minValue) {\n        particle.destroy();\n      }\n      break;\n  }\n}\nvar Updater = /*#__PURE__*/function () {\n  function Updater(container, particle) {\n    _classCallCheck(this, Updater);\n    this.container = container;\n    this.particle = particle;\n  }\n  _createClass(Updater, [{\n    key: \"update\",\n    value: function update(delta) {\n      if (this.particle.destroyed) {\n        return;\n      }\n      this.updateLife(delta);\n      if (this.particle.destroyed || this.particle.spawning) {\n        return;\n      }\n      this.updateOpacity(delta);\n      this.updateSize(delta);\n      this.updateAngle(delta);\n      this.updateTilt(delta);\n      this.updateRoll(delta);\n      this.updateWobble(delta);\n      this.updateColor(delta);\n      this.updateStrokeColor(delta);\n      this.updateOutModes(delta);\n    }\n  }, {\n    key: \"updateLife\",\n    value: function updateLife(delta) {\n      var particle = this.particle;\n      var justSpawned = false;\n      if (particle.spawning) {\n        particle.lifeDelayTime += delta.value;\n        if (particle.lifeDelayTime >= particle.lifeDelay) {\n          justSpawned = true;\n          particle.spawning = false;\n          particle.lifeDelayTime = 0;\n          particle.lifeTime = 0;\n        }\n      }\n      if (particle.lifeDuration === -1) {\n        return;\n      }\n      if (particle.spawning) {\n        return;\n      }\n      if (justSpawned) {\n        particle.lifeTime = 0;\n      } else {\n        particle.lifeTime += delta.value;\n      }\n      if (particle.lifeTime < particle.lifeDuration) {\n        return;\n      }\n      particle.lifeTime = 0;\n      if (particle.livesRemaining > 0) {\n        particle.livesRemaining--;\n      }\n      if (particle.livesRemaining === 0) {\n        particle.destroy();\n        return;\n      }\n      var canvasSize = this.container.canvas.size;\n      particle.position.x = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.width));\n      particle.position.y = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.height));\n      particle.spawning = true;\n      particle.lifeDelayTime = 0;\n      particle.lifeTime = 0;\n      particle.reset();\n      var lifeOptions = particle.options.life;\n      particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\n      particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\n    }\n  }, {\n    key: \"updateOpacity\",\n    value: function updateOpacity(delta) {\n      var _a, _b;\n      var particle = this.particle;\n      var opacityOpt = particle.options.opacity;\n      var opacityAnim = opacityOpt.animation;\n      var minValue = particle.opacity.min;\n      var maxValue = particle.opacity.max;\n      if (!(!particle.destroyed && opacityAnim.enable && (opacityAnim.count <= 0 || particle.loops.opacity < opacityAnim.count))) {\n        return;\n      }\n      switch (particle.opacity.status) {\n        case Enums_1.AnimationStatus.increasing:\n          if (particle.opacity.value >= maxValue) {\n            particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n            particle.loops.opacity++;\n          } else {\n            particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n          }\n          break;\n        case Enums_1.AnimationStatus.decreasing:\n          if (particle.opacity.value <= minValue) {\n            particle.opacity.status = Enums_1.AnimationStatus.increasing;\n            particle.loops.opacity++;\n          } else {\n            particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n          }\n          break;\n      }\n      checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n      if (!particle.destroyed) {\n        particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\n      }\n    }\n  }, {\n    key: \"updateSize\",\n    value: function updateSize(delta) {\n      var _a;\n      var particle = this.particle;\n      var sizeOpt = particle.options.size;\n      var sizeAnim = sizeOpt.animation;\n      var sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n      var minValue = particle.size.min;\n      var maxValue = particle.size.max;\n      if (!(!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count))) {\n        return;\n      }\n      switch (particle.size.status) {\n        case Enums_1.AnimationStatus.increasing:\n          if (particle.size.value >= maxValue) {\n            particle.size.status = Enums_1.AnimationStatus.decreasing;\n            particle.loops.size++;\n          } else {\n            particle.size.value += sizeVelocity;\n          }\n          break;\n        case Enums_1.AnimationStatus.decreasing:\n          if (particle.size.value <= minValue) {\n            particle.size.status = Enums_1.AnimationStatus.increasing;\n            particle.loops.size++;\n          } else {\n            particle.size.value -= sizeVelocity;\n          }\n      }\n      checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n      if (!particle.destroyed) {\n        particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\n      }\n    }\n  }, {\n    key: \"updateAngle\",\n    value: function updateAngle(delta) {\n      var _a;\n      var particle = this.particle;\n      var rotate = particle.options.rotate;\n      var rotateAnimation = rotate.animation;\n      var speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n      var max = 2 * Math.PI;\n      if (!rotateAnimation.enable) {\n        return;\n      }\n      switch (particle.rotate.status) {\n        case Enums_1.AnimationStatus.increasing:\n          particle.rotate.value += speed;\n          if (particle.rotate.value > max) {\n            particle.rotate.value -= max;\n          }\n          break;\n        case Enums_1.AnimationStatus.decreasing:\n        default:\n          particle.rotate.value -= speed;\n          if (particle.rotate.value < 0) {\n            particle.rotate.value += max;\n          }\n          break;\n      }\n    }\n  }, {\n    key: \"updateTilt\",\n    value: function updateTilt(delta) {\n      var _a;\n      var particle = this.particle;\n      var tilt = particle.options.tilt;\n      var tiltAnimation = tilt.animation;\n      var speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n      var max = 2 * Math.PI;\n      if (!tiltAnimation.enable) {\n        return;\n      }\n      switch (particle.tilt.status) {\n        case Enums_1.AnimationStatus.increasing:\n          particle.tilt.value += speed;\n          if (particle.tilt.value > max) {\n            particle.tilt.value -= max;\n          }\n          break;\n        case Enums_1.AnimationStatus.decreasing:\n        default:\n          particle.tilt.value -= speed;\n          if (particle.tilt.value < 0) {\n            particle.tilt.value += max;\n          }\n          break;\n      }\n    }\n  }, {\n    key: \"updateRoll\",\n    value: function updateRoll(delta) {\n      var particle = this.particle;\n      var roll = particle.options.roll;\n      var speed = particle.rollSpeed * delta.factor;\n      var max = 2 * Math.PI;\n      if (!roll.enable) {\n        return;\n      }\n      particle.rollAngle += speed;\n      if (particle.rollAngle > max) {\n        particle.rollAngle -= max;\n      }\n    }\n  }, {\n    key: \"updateWobble\",\n    value: function updateWobble(delta) {\n      var particle = this.particle;\n      var wobble = particle.options.wobble;\n      var speed = particle.wobbleSpeed * delta.factor;\n      var distance = particle.wobbleDistance * delta.factor / (1000 / 60);\n      var max = 2 * Math.PI;\n      if (!wobble.enable) {\n        return;\n      }\n      particle.wobbleAngle += speed;\n      if (particle.wobbleAngle > max) {\n        particle.wobbleAngle -= max;\n      }\n      particle.position.x += distance * Math.cos(particle.wobbleAngle);\n      particle.position.y += distance * Math.abs(Math.sin(particle.wobbleAngle));\n    }\n  }, {\n    key: \"updateColor\",\n    value: function updateColor(delta) {\n      var _a, _b, _c;\n      var particle = this.particle;\n      var animationOptions = particle.options.color.animation;\n      if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {\n        this.updateColorValue(particle, delta, particle.color.h, animationOptions.h, 360, false);\n      }\n      if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {\n        this.updateColorValue(particle, delta, particle.color.s, animationOptions.s, 100, true);\n      }\n      if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {\n        this.updateColorValue(particle, delta, particle.color.l, animationOptions.l, 100, true);\n      }\n    }\n  }, {\n    key: \"updateStrokeColor\",\n    value: function updateStrokeColor(delta) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n      var particle = this.particle;\n      if (!particle.stroke.color) {\n        return;\n      }\n      var animationOptions = particle.stroke.color.animation;\n      var valueAnimations = animationOptions;\n      if (valueAnimations.enable !== undefined) {\n        var hue = (_b = (_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h) !== null && _b !== void 0 ? _b : (_c = particle.color) === null || _c === void 0 ? void 0 : _c.h;\n        if (hue) {\n          this.updateColorValue(particle, delta, hue, valueAnimations, 360, false);\n        }\n      } else {\n        var hslAnimations = animationOptions;\n        var h = (_e = (_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.h) !== null && _e !== void 0 ? _e : (_f = particle.color) === null || _f === void 0 ? void 0 : _f.h;\n        if (h) {\n          this.updateColorValue(particle, delta, h, hslAnimations.h, 360, false);\n        }\n        var s = (_h = (_g = particle.strokeColor) === null || _g === void 0 ? void 0 : _g.s) !== null && _h !== void 0 ? _h : (_j = particle.color) === null || _j === void 0 ? void 0 : _j.s;\n        if (s) {\n          this.updateColorValue(particle, delta, s, hslAnimations.s, 100, true);\n        }\n        var l = (_l = (_k = particle.strokeColor) === null || _k === void 0 ? void 0 : _k.l) !== null && _l !== void 0 ? _l : (_m = particle.color) === null || _m === void 0 ? void 0 : _m.l;\n        if (l) {\n          this.updateColorValue(particle, delta, l, hslAnimations.l, 100, true);\n        }\n      }\n    }\n  }, {\n    key: \"updateColorValue\",\n    value: function updateColorValue(particle, delta, value, valueAnimation, max, decrease) {\n      var _a;\n      var colorValue = value;\n      if (!colorValue || !valueAnimation.enable) {\n        return;\n      }\n      var offset = Utils_1.NumberUtils.randomInRange(valueAnimation.offset);\n      var velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\n      if (!decrease || colorValue.status === Enums_1.AnimationStatus.increasing) {\n        colorValue.value += velocity;\n        if (decrease && colorValue.value > max) {\n          colorValue.status = Enums_1.AnimationStatus.decreasing;\n          colorValue.value -= colorValue.value % max;\n        }\n      } else {\n        colorValue.value -= velocity;\n        if (colorValue.value < 0) {\n          colorValue.status = Enums_1.AnimationStatus.increasing;\n          colorValue.value += colorValue.value;\n        }\n      }\n      if (colorValue.value > max) {\n        colorValue.value %= max;\n      }\n    }\n  }, {\n    key: \"updateOutModes\",\n    value: function updateOutModes(delta) {\n      var _a, _b, _c, _d;\n      var outModes = this.particle.options.move.outModes;\n      this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n      this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n      this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n      this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n    }\n  }, {\n    key: \"updateOutMode\",\n    value: function updateOutMode(delta, outMode, direction) {\n      var container = this.container;\n      var particle = this.particle;\n      switch (outMode) {\n        case Enums_1.OutMode.bounce:\n        case Enums_1.OutMode.bounceVertical:\n        case Enums_1.OutMode.bounceHorizontal:\n        case \"bounceVertical\":\n        case \"bounceHorizontal\":\n        case Enums_1.OutMode.split:\n          this.updateBounce(delta, direction, outMode);\n          break;\n        case Enums_1.OutMode.destroy:\n          if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            container.particles.remove(particle, true);\n          }\n          break;\n        case Enums_1.OutMode.out:\n          if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            this.fixOutOfCanvasPosition(direction);\n          }\n          break;\n        case Enums_1.OutMode.none:\n          this.bounceNone(direction);\n          break;\n      }\n    }\n  }, {\n    key: \"fixOutOfCanvasPosition\",\n    value: function fixOutOfCanvasPosition(direction) {\n      var container = this.container;\n      var particle = this.particle;\n      var wrap = particle.options.move.warp;\n      var canvasSize = container.canvas.size;\n      var newPos = {\n        bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n        left: -particle.getRadius() - particle.offset.x,\n        right: canvasSize.width + particle.getRadius() + particle.offset.x,\n        top: -particle.getRadius() - particle.offset.y\n      };\n      var sizeValue = particle.getRadius();\n      var nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n      if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n        particle.position.x = newPos.left;\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n        }\n      } else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n        particle.position.x = newPos.right;\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n        }\n      }\n      if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n        }\n        particle.position.y = newPos.top;\n      } else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n        }\n        particle.position.y = newPos.bottom;\n      }\n    }\n  }, {\n    key: \"updateBounce\",\n    value: function updateBounce(delta, direction, outMode) {\n      var container = this.container;\n      var particle = this.particle;\n      var handled = false;\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            plugin = _step$value[1];\n          if (plugin.particleBounce !== undefined) {\n            handled = plugin.particleBounce(particle, delta, direction);\n          }\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (handled) {\n        return;\n      }\n      var pos = particle.getPosition(),\n        offset = particle.offset,\n        size = particle.getRadius(),\n        bounds = Utils_1.Utils.calculateBounds(pos, size),\n        canvasSize = container.canvas.size;\n      bounceHorizontal({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n      bounceVertical({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n    }\n  }, {\n    key: \"bounceNone\",\n    value: function bounceNone(direction) {\n      var particle = this.particle;\n      if (particle.options.move.distance) {\n        return;\n      }\n      var gravityOptions = particle.options.move.gravity;\n      var container = this.container;\n      if (!gravityOptions.enable) {\n        if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          container.particles.remove(particle);\n        }\n      } else {\n        var position = particle.position;\n        if (gravityOptions.acceleration >= 0 && position.y > container.canvas.size.height && direction === Enums_1.OutModeDirection.bottom || gravityOptions.acceleration < 0 && position.y < 0 && direction === Enums_1.OutModeDirection.top) {\n          container.particles.remove(particle);\n        }\n      }\n    }\n  }]);\n  return Updater;\n}();\nexports.Updater = Updater;","map":{"version":3,"names":["_slicedToArray","require","_createForOfIteratorHelper","_classCallCheck","_createClass","Object","defineProperty","exports","value","Updater","Utils_1","Enums_1","bounceHorizontal","data","outMode","OutMode","bounce","split","velocity","particle","x","direction","OutModeDirection","right","bounds","canvasSize","width","left","newVelocity","NumberUtils","getValue","options","horizontal","minPos","offset","size","position","destroy","bounceVertical","y","bottom","height","top","vertical","checkDestroy","minValue","maxValue","DestroyType","max","min","container","key","update","delta","destroyed","updateLife","spawning","updateOpacity","updateSize","updateAngle","updateTilt","updateRoll","updateWobble","updateColor","updateStrokeColor","updateOutModes","justSpawned","lifeDelayTime","lifeDelay","lifeTime","lifeDuration","livesRemaining","canvas","randomInRange","setRangeValue","reset","lifeOptions","life","delay","duration","_a","_b","opacityOpt","opacity","opacityAnim","animation","enable","count","loops","status","AnimationStatus","increasing","decreasing","factor","clamp","sizeOpt","sizeAnim","sizeVelocity","rotate","rotateAnimation","speed","Math","PI","tilt","tiltAnimation","roll","rollSpeed","rollAngle","wobble","wobbleSpeed","distance","wobbleDistance","wobbleAngle","cos","abs","sin","_c","animationOptions","color","h","undefined","updateColorValue","s","l","_d","_e","_f","_g","_h","_j","_k","_l","_m","stroke","valueAnimations","hue","strokeColor","hslAnimations","valueAnimation","decrease","colorValue","outModes","move","updateOutMode","default","updateBounce","Utils","isPointInside","getRadius","particles","remove","out","fixOutOfCanvasPosition","none","bounceNone","wrap","warp","newPos","sizeValue","nextBounds","calculateBounds","random","handled","_iterator","plugins","_step","n","done","_step$value","plugin","particleBounce","err","e","f","pos","getPosition","gravityOptions","gravity","acceleration"],"sources":["C:/Users/matth/Desktop/dotDev/Portfolio/React Portfolio Website/node_modules/tsparticles/Core/Particle/Updater.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Updater = void 0;\r\nconst Utils_1 = require(\"../../Utils\");\r\nconst Enums_1 = require(\"../../Enums\");\r\nfunction bounceHorizontal(data) {\r\n    if (!(data.outMode === Enums_1.OutMode.bounce ||\r\n        data.outMode === Enums_1.OutMode.bounceHorizontal ||\r\n        data.outMode === \"bounceHorizontal\" ||\r\n        data.outMode === Enums_1.OutMode.split)) {\r\n        return;\r\n    }\r\n    const velocity = data.particle.velocity.x;\r\n    if (!((data.direction === Enums_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\r\n        (data.direction === Enums_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0))) {\r\n        return;\r\n    }\r\n    const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.horizontal);\r\n    data.particle.velocity.x *= -newVelocity;\r\n    const minPos = data.offset.x + data.size;\r\n    if (data.bounds.right >= data.canvasSize.width) {\r\n        data.particle.position.x = data.canvasSize.width - minPos;\r\n    }\r\n    else if (data.bounds.left <= 0) {\r\n        data.particle.position.x = minPos;\r\n    }\r\n    if (data.outMode === Enums_1.OutMode.split) {\r\n        data.particle.destroy();\r\n    }\r\n}\r\nfunction bounceVertical(data) {\r\n    if (!(data.outMode === Enums_1.OutMode.bounce ||\r\n        data.outMode === Enums_1.OutMode.bounceVertical ||\r\n        data.outMode === \"bounceVertical\" ||\r\n        data.outMode === Enums_1.OutMode.split)) {\r\n        return;\r\n    }\r\n    const velocity = data.particle.velocity.y;\r\n    if (!((data.direction === Enums_1.OutModeDirection.bottom &&\r\n        data.bounds.bottom >= data.canvasSize.height &&\r\n        velocity > 0) ||\r\n        (data.direction === Enums_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0))) {\r\n        return;\r\n    }\r\n    const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.vertical);\r\n    data.particle.velocity.y *= -newVelocity;\r\n    const minPos = data.offset.y + data.size;\r\n    if (data.bounds.bottom >= data.canvasSize.height) {\r\n        data.particle.position.y = data.canvasSize.height - minPos;\r\n    }\r\n    else if (data.bounds.top <= 0) {\r\n        data.particle.position.y = minPos;\r\n    }\r\n    if (data.outMode === Enums_1.OutMode.split) {\r\n        data.particle.destroy();\r\n    }\r\n}\r\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\r\n    switch (destroy) {\r\n        case Enums_1.DestroyType.max:\r\n            if (value >= maxValue) {\r\n                particle.destroy();\r\n            }\r\n            break;\r\n        case Enums_1.DestroyType.min:\r\n            if (value <= minValue) {\r\n                particle.destroy();\r\n            }\r\n            break;\r\n    }\r\n}\r\nclass Updater {\r\n    constructor(container, particle) {\r\n        this.container = container;\r\n        this.particle = particle;\r\n    }\r\n    update(delta) {\r\n        if (this.particle.destroyed) {\r\n            return;\r\n        }\r\n        this.updateLife(delta);\r\n        if (this.particle.destroyed || this.particle.spawning) {\r\n            return;\r\n        }\r\n        this.updateOpacity(delta);\r\n        this.updateSize(delta);\r\n        this.updateAngle(delta);\r\n        this.updateTilt(delta);\r\n        this.updateRoll(delta);\r\n        this.updateWobble(delta);\r\n        this.updateColor(delta);\r\n        this.updateStrokeColor(delta);\r\n        this.updateOutModes(delta);\r\n    }\r\n    updateLife(delta) {\r\n        const particle = this.particle;\r\n        let justSpawned = false;\r\n        if (particle.spawning) {\r\n            particle.lifeDelayTime += delta.value;\r\n            if (particle.lifeDelayTime >= particle.lifeDelay) {\r\n                justSpawned = true;\r\n                particle.spawning = false;\r\n                particle.lifeDelayTime = 0;\r\n                particle.lifeTime = 0;\r\n            }\r\n        }\r\n        if (particle.lifeDuration === -1) {\r\n            return;\r\n        }\r\n        if (particle.spawning) {\r\n            return;\r\n        }\r\n        if (justSpawned) {\r\n            particle.lifeTime = 0;\r\n        }\r\n        else {\r\n            particle.lifeTime += delta.value;\r\n        }\r\n        if (particle.lifeTime < particle.lifeDuration) {\r\n            return;\r\n        }\r\n        particle.lifeTime = 0;\r\n        if (particle.livesRemaining > 0) {\r\n            particle.livesRemaining--;\r\n        }\r\n        if (particle.livesRemaining === 0) {\r\n            particle.destroy();\r\n            return;\r\n        }\r\n        const canvasSize = this.container.canvas.size;\r\n        particle.position.x = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.width));\r\n        particle.position.y = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.height));\r\n        particle.spawning = true;\r\n        particle.lifeDelayTime = 0;\r\n        particle.lifeTime = 0;\r\n        particle.reset();\r\n        const lifeOptions = particle.options.life;\r\n        particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\r\n        particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\r\n    }\r\n    updateOpacity(delta) {\r\n        var _a, _b;\r\n        const particle = this.particle;\r\n        const opacityOpt = particle.options.opacity;\r\n        const opacityAnim = opacityOpt.animation;\r\n        const minValue = particle.opacity.min;\r\n        const maxValue = particle.opacity.max;\r\n        if (!(!particle.destroyed &&\r\n            opacityAnim.enable &&\r\n            (opacityAnim.count <= 0 || particle.loops.opacity < opacityAnim.count))) {\r\n            return;\r\n        }\r\n        switch (particle.opacity.status) {\r\n            case Enums_1.AnimationStatus.increasing:\r\n                if (particle.opacity.value >= maxValue) {\r\n                    particle.opacity.status = Enums_1.AnimationStatus.decreasing;\r\n                    particle.loops.opacity++;\r\n                }\r\n                else {\r\n                    particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\r\n                }\r\n                break;\r\n            case Enums_1.AnimationStatus.decreasing:\r\n                if (particle.opacity.value <= minValue) {\r\n                    particle.opacity.status = Enums_1.AnimationStatus.increasing;\r\n                    particle.loops.opacity++;\r\n                }\r\n                else {\r\n                    particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\r\n                }\r\n                break;\r\n        }\r\n        checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\r\n        if (!particle.destroyed) {\r\n            particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\r\n        }\r\n    }\r\n    updateSize(delta) {\r\n        var _a;\r\n        const particle = this.particle;\r\n        const sizeOpt = particle.options.size;\r\n        const sizeAnim = sizeOpt.animation;\r\n        const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\r\n        const minValue = particle.size.min;\r\n        const maxValue = particle.size.max;\r\n        if (!(!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count))) {\r\n            return;\r\n        }\r\n        switch (particle.size.status) {\r\n            case Enums_1.AnimationStatus.increasing:\r\n                if (particle.size.value >= maxValue) {\r\n                    particle.size.status = Enums_1.AnimationStatus.decreasing;\r\n                    particle.loops.size++;\r\n                }\r\n                else {\r\n                    particle.size.value += sizeVelocity;\r\n                }\r\n                break;\r\n            case Enums_1.AnimationStatus.decreasing:\r\n                if (particle.size.value <= minValue) {\r\n                    particle.size.status = Enums_1.AnimationStatus.increasing;\r\n                    particle.loops.size++;\r\n                }\r\n                else {\r\n                    particle.size.value -= sizeVelocity;\r\n                }\r\n        }\r\n        checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\r\n        if (!particle.destroyed) {\r\n            particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\r\n        }\r\n    }\r\n    updateAngle(delta) {\r\n        var _a;\r\n        const particle = this.particle;\r\n        const rotate = particle.options.rotate;\r\n        const rotateAnimation = rotate.animation;\r\n        const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\r\n        const max = 2 * Math.PI;\r\n        if (!rotateAnimation.enable) {\r\n            return;\r\n        }\r\n        switch (particle.rotate.status) {\r\n            case Enums_1.AnimationStatus.increasing:\r\n                particle.rotate.value += speed;\r\n                if (particle.rotate.value > max) {\r\n                    particle.rotate.value -= max;\r\n                }\r\n                break;\r\n            case Enums_1.AnimationStatus.decreasing:\r\n            default:\r\n                particle.rotate.value -= speed;\r\n                if (particle.rotate.value < 0) {\r\n                    particle.rotate.value += max;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    updateTilt(delta) {\r\n        var _a;\r\n        const particle = this.particle;\r\n        const tilt = particle.options.tilt;\r\n        const tiltAnimation = tilt.animation;\r\n        const speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\r\n        const max = 2 * Math.PI;\r\n        if (!tiltAnimation.enable) {\r\n            return;\r\n        }\r\n        switch (particle.tilt.status) {\r\n            case Enums_1.AnimationStatus.increasing:\r\n                particle.tilt.value += speed;\r\n                if (particle.tilt.value > max) {\r\n                    particle.tilt.value -= max;\r\n                }\r\n                break;\r\n            case Enums_1.AnimationStatus.decreasing:\r\n            default:\r\n                particle.tilt.value -= speed;\r\n                if (particle.tilt.value < 0) {\r\n                    particle.tilt.value += max;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    updateRoll(delta) {\r\n        const particle = this.particle;\r\n        const roll = particle.options.roll;\r\n        const speed = particle.rollSpeed * delta.factor;\r\n        const max = 2 * Math.PI;\r\n        if (!roll.enable) {\r\n            return;\r\n        }\r\n        particle.rollAngle += speed;\r\n        if (particle.rollAngle > max) {\r\n            particle.rollAngle -= max;\r\n        }\r\n    }\r\n    updateWobble(delta) {\r\n        const particle = this.particle;\r\n        const wobble = particle.options.wobble;\r\n        const speed = particle.wobbleSpeed * delta.factor;\r\n        const distance = (particle.wobbleDistance * delta.factor) / (1000 / 60);\r\n        const max = 2 * Math.PI;\r\n        if (!wobble.enable) {\r\n            return;\r\n        }\r\n        particle.wobbleAngle += speed;\r\n        if (particle.wobbleAngle > max) {\r\n            particle.wobbleAngle -= max;\r\n        }\r\n        particle.position.x += distance * Math.cos(particle.wobbleAngle);\r\n        particle.position.y += distance * Math.abs(Math.sin(particle.wobbleAngle));\r\n    }\r\n    updateColor(delta) {\r\n        var _a, _b, _c;\r\n        const particle = this.particle;\r\n        const animationOptions = particle.options.color.animation;\r\n        if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {\r\n            this.updateColorValue(particle, delta, particle.color.h, animationOptions.h, 360, false);\r\n        }\r\n        if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {\r\n            this.updateColorValue(particle, delta, particle.color.s, animationOptions.s, 100, true);\r\n        }\r\n        if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {\r\n            this.updateColorValue(particle, delta, particle.color.l, animationOptions.l, 100, true);\r\n        }\r\n    }\r\n    updateStrokeColor(delta) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\r\n        const particle = this.particle;\r\n        if (!particle.stroke.color) {\r\n            return;\r\n        }\r\n        const animationOptions = particle.stroke.color.animation;\r\n        const valueAnimations = animationOptions;\r\n        if (valueAnimations.enable !== undefined) {\r\n            const hue = (_b = (_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h) !== null && _b !== void 0 ? _b : (_c = particle.color) === null || _c === void 0 ? void 0 : _c.h;\r\n            if (hue) {\r\n                this.updateColorValue(particle, delta, hue, valueAnimations, 360, false);\r\n            }\r\n        }\r\n        else {\r\n            const hslAnimations = animationOptions;\r\n            const h = (_e = (_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.h) !== null && _e !== void 0 ? _e : (_f = particle.color) === null || _f === void 0 ? void 0 : _f.h;\r\n            if (h) {\r\n                this.updateColorValue(particle, delta, h, hslAnimations.h, 360, false);\r\n            }\r\n            const s = (_h = (_g = particle.strokeColor) === null || _g === void 0 ? void 0 : _g.s) !== null && _h !== void 0 ? _h : (_j = particle.color) === null || _j === void 0 ? void 0 : _j.s;\r\n            if (s) {\r\n                this.updateColorValue(particle, delta, s, hslAnimations.s, 100, true);\r\n            }\r\n            const l = (_l = (_k = particle.strokeColor) === null || _k === void 0 ? void 0 : _k.l) !== null && _l !== void 0 ? _l : (_m = particle.color) === null || _m === void 0 ? void 0 : _m.l;\r\n            if (l) {\r\n                this.updateColorValue(particle, delta, l, hslAnimations.l, 100, true);\r\n            }\r\n        }\r\n    }\r\n    updateColorValue(particle, delta, value, valueAnimation, max, decrease) {\r\n        var _a;\r\n        const colorValue = value;\r\n        if (!colorValue || !valueAnimation.enable) {\r\n            return;\r\n        }\r\n        const offset = Utils_1.NumberUtils.randomInRange(valueAnimation.offset);\r\n        const velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\r\n        if (!decrease || colorValue.status === Enums_1.AnimationStatus.increasing) {\r\n            colorValue.value += velocity;\r\n            if (decrease && colorValue.value > max) {\r\n                colorValue.status = Enums_1.AnimationStatus.decreasing;\r\n                colorValue.value -= colorValue.value % max;\r\n            }\r\n        }\r\n        else {\r\n            colorValue.value -= velocity;\r\n            if (colorValue.value < 0) {\r\n                colorValue.status = Enums_1.AnimationStatus.increasing;\r\n                colorValue.value += colorValue.value;\r\n            }\r\n        }\r\n        if (colorValue.value > max) {\r\n            colorValue.value %= max;\r\n        }\r\n    }\r\n    updateOutModes(delta) {\r\n        var _a, _b, _c, _d;\r\n        const outModes = this.particle.options.move.outModes;\r\n        this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\r\n        this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\r\n        this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\r\n        this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\r\n    }\r\n    updateOutMode(delta, outMode, direction) {\r\n        const container = this.container;\r\n        const particle = this.particle;\r\n        switch (outMode) {\r\n            case Enums_1.OutMode.bounce:\r\n            case Enums_1.OutMode.bounceVertical:\r\n            case Enums_1.OutMode.bounceHorizontal:\r\n            case \"bounceVertical\":\r\n            case \"bounceHorizontal\":\r\n            case Enums_1.OutMode.split:\r\n                this.updateBounce(delta, direction, outMode);\r\n                break;\r\n            case Enums_1.OutMode.destroy:\r\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\r\n                    container.particles.remove(particle, true);\r\n                }\r\n                break;\r\n            case Enums_1.OutMode.out:\r\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\r\n                    this.fixOutOfCanvasPosition(direction);\r\n                }\r\n                break;\r\n            case Enums_1.OutMode.none:\r\n                this.bounceNone(direction);\r\n                break;\r\n        }\r\n    }\r\n    fixOutOfCanvasPosition(direction) {\r\n        const container = this.container;\r\n        const particle = this.particle;\r\n        const wrap = particle.options.move.warp;\r\n        const canvasSize = container.canvas.size;\r\n        const newPos = {\r\n            bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\r\n            left: -particle.getRadius() - particle.offset.x,\r\n            right: canvasSize.width + particle.getRadius() + particle.offset.x,\r\n            top: -particle.getRadius() - particle.offset.y,\r\n        };\r\n        const sizeValue = particle.getRadius();\r\n        const nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\r\n        if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\r\n            particle.position.x = newPos.left;\r\n            if (!wrap) {\r\n                particle.position.y = Math.random() * canvasSize.height;\r\n            }\r\n        }\r\n        else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\r\n            particle.position.x = newPos.right;\r\n            if (!wrap) {\r\n                particle.position.y = Math.random() * canvasSize.height;\r\n            }\r\n        }\r\n        if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\r\n            if (!wrap) {\r\n                particle.position.x = Math.random() * canvasSize.width;\r\n            }\r\n            particle.position.y = newPos.top;\r\n        }\r\n        else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\r\n            if (!wrap) {\r\n                particle.position.x = Math.random() * canvasSize.width;\r\n            }\r\n            particle.position.y = newPos.bottom;\r\n        }\r\n    }\r\n    updateBounce(delta, direction, outMode) {\r\n        const container = this.container;\r\n        const particle = this.particle;\r\n        let handled = false;\r\n        for (const [, plugin] of container.plugins) {\r\n            if (plugin.particleBounce !== undefined) {\r\n                handled = plugin.particleBounce(particle, delta, direction);\r\n            }\r\n            if (handled) {\r\n                break;\r\n            }\r\n        }\r\n        if (handled) {\r\n            return;\r\n        }\r\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = Utils_1.Utils.calculateBounds(pos, size), canvasSize = container.canvas.size;\r\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\r\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\r\n    }\r\n    bounceNone(direction) {\r\n        const particle = this.particle;\r\n        if (particle.options.move.distance) {\r\n            return;\r\n        }\r\n        const gravityOptions = particle.options.move.gravity;\r\n        const container = this.container;\r\n        if (!gravityOptions.enable) {\r\n            if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\r\n                container.particles.remove(particle);\r\n            }\r\n        }\r\n        else {\r\n            const position = particle.position;\r\n            if ((gravityOptions.acceleration >= 0 &&\r\n                position.y > container.canvas.size.height &&\r\n                direction === Enums_1.OutModeDirection.bottom) ||\r\n                (gravityOptions.acceleration < 0 && position.y < 0 && direction === Enums_1.OutModeDirection.top)) {\r\n                container.particles.remove(particle);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.Updater = Updater;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}